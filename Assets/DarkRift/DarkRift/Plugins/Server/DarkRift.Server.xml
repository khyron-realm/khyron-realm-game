<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DarkRift.Server</name>
    </assembly>
    <members>
        <member name="T:DarkRift.Server.Client">
            <inheritDoc />
        </member>
        <member name="E:DarkRift.Server.Client.MessageReceived">
            <inheritdoc/>
        </member>
        <member name="E:DarkRift.Server.Client.StrikeOccured">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.ID">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.RemoteTcpEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.RemoteUdpEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.IsConnected">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.ConnectionState">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.Strikes">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.ConnectionTime">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.MessagesSent">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.MessagesPushed">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.MessagesReceived">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.RemoteEndPoints">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Client.RoundTripTime">
            <inheritdoc/>
        </member>
        <member name="F:DarkRift.Server.Client.connection">
            <summary>
                The connection to the client.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Client.clientManager">
            <summary>
                The client manager in charge of this client.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Client.threadHelper">
            <summary>
                The thread helper this client will use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Client.logger">
            <summary>
                The logger this client will use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Client.messagesSentCounter">
            <summary>
                Counter metric of the number of messages sent.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Client.messagesReceivedCounter">
            <summary>
                Counter metric of the number of messages received.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Client.messageReceivedEventTimeHistogram">
            <summary>
                Histogram metric of the time taken to execute the <see cref="E:DarkRift.Server.Client.MessageReceived"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Client.messageReceivedEventFailuresCounter">
            <summary>
                Counter metric of failures executing the <see cref="E:DarkRift.Server.Client.MessageReceived"/> event.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Client.Create(DarkRift.Server.NetworkServerConnection,System.UInt16,DarkRift.Server.ClientManager,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.Logger,DarkRift.Server.Metrics.MetricsCollector)">
            <summary>
                Creates a new client connection with a given global identifier and the client they are connected through.
            </summary>
            <param name="connection">The connection we handle.</param>
            <param name="id">The ID we've been assigned.</param>
            <param name="clientManager">The client manager in charge of this client.</param>
            <param name="threadHelper">The thread helper this client will use.</param>
            <param name="logger">The logger this client will use.</param>
            <param name="metricsCollector">The metrics collector this client will use.</param>
        </member>
        <member name="M:DarkRift.Server.Client.#ctor(DarkRift.Server.NetworkServerConnection,System.UInt16,DarkRift.Server.ClientManager,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.Logger,DarkRift.Server.Metrics.MetricsCollector)">
            <summary>
                Creates a new client connection with a given global identifier and the client they are connected through.
            </summary>
            <param name="connection">The connection we handle.</param>
            <param name="id">The ID assigned to this client.</param>
            <param name="clientManager">The client manager in charge of this client.</param>
            <param name="threadHelper">The thread helper this client will use.</param>
            <param name="logger">The logger this client will use.</param>
            <param name="metricsCollector">The metrics collector this client will use.</param>
        </member>
        <member name="M:DarkRift.Server.Client.SendID">
            <summary>
                Sends the client their ID.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Client.StartListening">
            <summary>
            Starts this client's connecting listening for messages.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Client.SendMessage(DarkRift.Message,DarkRift.SendMode)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Client.Disconnect">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Client.DropConnection">
            <summary>
                Disconnects the connection without invoking events for plugins.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Client.GetRemoteEndPoint(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Client.Disconnected(System.Net.Sockets.SocketError,System.Exception)">
            <summary>
                Handles a remote disconnection.
            </summary>
            <param name="error">The error that caused the disconnection.</param>
            <param name="exception">The exception that caused the disconnection.</param>
        </member>
        <member name="M:DarkRift.Server.Client.HandleIncomingDataBuffer(DarkRift.MessageBuffer,DarkRift.SendMode)">
            <summary>
                Handles data that was sent from this client.
            </summary>
            <param name="buffer">The buffer that was received.</param>
            <param name="sendMode">The method data was sent using.</param>
        </member>
        <member name="M:DarkRift.Server.Client.HandleIncomingMessage(DarkRift.Message,DarkRift.SendMode)">
            <summary>
                Handles messages that were sent from this client.
            </summary>
            <param name="message">The message that was received.</param>
            <param name="sendMode">The method data was sent using.</param>
        </member>
        <member name="M:DarkRift.Server.Client.PushBuffer(DarkRift.MessageBuffer,DarkRift.SendMode)">
            <summary>
                Pushes a buffer to the client.
            </summary>
            <param name="buffer">The buffer to push.</param>
            <param name="sendMode">The method to send the data using.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="M:DarkRift.Server.Client.Strike(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Client.Strike(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Client.Strike(DarkRift.Server.StrikeReason,System.String,System.Int32)">
            <summary>
                Informs plugins and adds a strike to this client's record.
            </summary>
            <param name="reason">The reason for the strike.</param>
            <param name="message">A message describing the reason for the strike.</param>
            <param name="weight">The number of strikes this accounts for.</param>
        </member>
        <member name="M:DarkRift.Server.Client.EnforceStrike(DarkRift.Server.StrikeReason,System.String,System.Int32)">
            <summary>
                Adds a strike to this client's record.
            </summary>
            <param name="reason">The reason for the strike.</param>
            <param name="message">A message describing the reason for the strike.</param>
            <param name="weight">The number of strikes this accounts for.</param>
        </member>
        <member name="M:DarkRift.Server.Client.Dispose">
            <summary>
                Disposes of this client.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ClientConnectedEventArgs">
            <summary>
                Event arguments for the <see cref="E:DarkRift.Server.ClientManager.ClientConnected"/> event.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientConnectedEventArgs.Client">
            <summary>
                The <see cref="P:DarkRift.Server.ClientConnectedEventArgs.Client"/> object for the new client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientConnectedEventArgs.RemoteTcpEndPoint">
            <summary>
                The remote end point of the TCP connection to this client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientConnectedEventArgs.RemoteUdpEndPoint">
            <summary>
                The remote end point of the UDP connection to this client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientConnectedEventArgs.RemoteEndPoints">
            <summary>
                The collection of end points this client is connected to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ClientConnectedEventArgs.#ctor(DarkRift.Server.IClient)">
            <summary>
                Creates a new ClientConnectedEventArgs from the given data.
            </summary>
            <param name="clientConnection">The ClientConnection of the new client.</param>
        </member>
        <member name="M:DarkRift.Server.ClientConnectedEventArgs.GetRemoteEndPoint(System.String)">
            <summary>
                Gets the remote end point with the given name.
            </summary>
            <param name="name">The end point name.</param>
            <returns>The end point.</returns>
        </member>
        <member name="T:DarkRift.Server.ClientDisconnectedEventArgs">
            <summary>
                Event arguments for <see cref="E:DarkRift.Server.ClientManager.ClientDisconnected"/> events.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientDisconnectedEventArgs.Client">
            <summary>
                The Client of the new client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientDisconnectedEventArgs.RemoteTcpEndPoint">
            <summary>
                The remote end point of the TCP connection to this client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientDisconnectedEventArgs.RemoteUdpEndPoint">
            <summary>
                The remote end point of the UDP connection to this client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientDisconnectedEventArgs.RemoteEndPoints">
            <summary>
                The collection of end points this client is connected to.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientDisconnectedEventArgs.LocalDisconnect">
            <summary>
                If the disconnect was requested by a call to <see cref="M:DarkRift.Server.Client.Disconnect"/>.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientDisconnectedEventArgs.Error">
            <summary>
                The error that caused the disconnect.
            </summary>
            <remarks>
                If <see cref="P:DarkRift.Server.ClientDisconnectedEventArgs.LocalDisconnect"/> is true this field will be set to a default value and 
                should be ignored.
                
                If the contents of this property is <see cref="F:System.Net.Sockets.SocketError.SocketError"/> consider 
                exploring <see cref="P:DarkRift.Server.ClientDisconnectedEventArgs.Exception"/> for a general exception that caused the disconnection 
                instead.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.ClientDisconnectedEventArgs.Exception">
            <summary>
                The exception that caused the disconnection.
            </summary>
            <remarks>
                If <see cref="P:DarkRift.Server.ClientDisconnectedEventArgs.LocalDisconnect"/> is true this field will be set to a default value and 
                should be ignored.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.ClientDisconnectedEventArgs.#ctor(DarkRift.Server.IClient,System.Boolean,System.Net.Sockets.SocketError,System.Exception)">
            <summary>
                Creates a new ClientDisconnectedEventArgs from the given data.
            </summary>
            <param name="clientConnection">The ClientConnection of the client.</param>
            <param name="localDisconnect">Whether it was a local call that caused the disconnection.</param>
            <param name="error">The error that caused the disconnect.</param>
            <param name="exception">The exception that caused the disconenct.</param>
        </member>
        <member name="M:DarkRift.Server.ClientDisconnectedEventArgs.GetRemoteEndPoint(System.String)">
            <summary>
                Gets the remote end point with the given name.
            </summary>
            <param name="name">The end point name.</param>
            <returns>The end point.</returns>
        </member>
        <member name="T:DarkRift.Server.ClientManager">
            <summary>
                Handles all clients on the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.Address">
            <summary>
                The address the server is listening on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.Port">
            <summary>
                The port the server is listening on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.IPVersion">
            <summary>
                The IP version that the server is listening on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.NoDelay">
            <summary>
                Whether Nagle's algorithm is disabled.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.Listening">
            <summary>
                Returns whether the server has been started and not yet stopped.
            </summary>
        </member>
        <member name="E:DarkRift.Server.ClientManager.ClientConnected">
            <summary>
                Invoked when a client connects to the server.
            </summary>
        </member>
        <member name="E:DarkRift.Server.ClientManager.ClientDisconnected">
            <summary>
                Invoked when a client disconnects from the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.Count">
            <summary>
                Returns the number of clients currently connected.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.MaxStrikes">
            <summary>
                The number of strikes a client can get before they are kicked.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClientManager.UseFallbackNetworking">
            <summary>
                Whether the fallback networking is being used for compatability.
            </summary>
            <remarks>
                Unity has issues with DarkRift's default (better) socket interfaces so this indicates
                the fallback networking is in use for compatability at a performance cost.
            </remarks>
        </member>
        <member name="F:DarkRift.Server.ClientManager.clients">
            <summary>
                The clients connected to this server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.allocatedIds">
            <summary>
                The IDs of clients connecting but without objects created on the sever yet.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.lastIDAllocated">
            <summary>
                The last ID allocated on this server
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.idLockObj">
            <summary>
                The lock on ID allocation
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.networkListenerManager">
            <summary>
                The server's network listener manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.threadHelper">
            <summary>
                The thread helper the client manager will use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.logger">
            <summary>
                The logger this client manager will use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.clientLogger">
            <summary>
                The logger clients will use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.clientsConnectedGauge">
            <summary>
                Gauge metric of the number of clients currently connected.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.clientConnectedEventTimeHistogram">
            <summary>
                Histogram metric of time taken to execute the <see cref="E:DarkRift.Server.ClientManager.ClientConnected"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.clientDisconnectedEventTimeHistogram">
            <summary>
                Histogram metric of time taken to execute the <see cref="E:DarkRift.Server.ClientManager.ClientDisconnected"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.clientConnectedEventFailuresCounter">
            <summary>
                Counter metric of failures executing the <see cref="E:DarkRift.Server.ClientManager.ClientConnected"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.clientDisconnectedEventFailuresCounter">
            <summary>
                Counter metric of failures executing the <see cref="E:DarkRift.Server.ClientManager.ClientDisconnected"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ClientManager.clientMetricsCollector">
            <summary>
                Metrics collector used by the clients.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ClientManager.#ctor(DarkRift.Server.ServerSpawnData.ServerSettings,DarkRift.Server.NetworkListenerManager,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.Logger,DarkRift.Server.Logger,DarkRift.Server.Metrics.MetricsCollector,DarkRift.Server.Metrics.MetricsCollector)">
            <summary>
                Creates a new client manager.
            </summary>
            <param name="settings">The settings for this client manager.</param>
            <param name="networkListenerManager">The server's network listener manager. Used to implement obsolete functionality.</param>
            <param name="threadHelper">The thread helper the client manager will use.</param>
            <param name="logger">The logger this client manager will use.</param>
            <param name="clientLogger">The logger clients will use.</param>
            <param name="metricsCollector">The metrics collector to use.</param>
            <param name="clientMetricsCollector">The metrics collector clients will use.</param>
        </member>
        <member name="M:DarkRift.Server.ClientManager.SubscribeToListeners">
            <summary>
                Subscribes the client manager to all network listeners in the NetworkListenerManager.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ClientManager.GetDefaultBichannelListenerOrError">
            <summary>
                Returns the Default BichannelListener if present or throws an exception.
            </summary>
            <returns>The default Bichannel listener.</returns>
        </member>
        <member name="M:DarkRift.Server.ClientManager.HandleNewConnection(DarkRift.Server.NetworkServerConnection)">
            <summary>
                Called when a new client connects.
            </summary>
            <param name="connection">The new client.</param>
        </member>
        <member name="M:DarkRift.Server.ClientManager.AllocateIDToClient(System.UInt16,DarkRift.Server.Client,System.Int32@)">
            <summary>
                Allocates a specified ID to a client.
            </summary>
            <param name="id">The ID to allocate.</param>
            <param name="client">The client to allocate the ID to.</param>
            <param name="totalClients">The total number of clients connected.</param>
        </member>
        <member name="M:DarkRift.Server.ClientManager.DeallocateID(System.UInt16,System.Int32@)">
            <summary>
                Deallocates a specified ID.
            </summary>
            <param name="id">The ID to deallocate.</param>
            <param name="totalClients">The total number of clients connected.</param>
            <returns>true, if the ID was allocated; else, false.</returns>
        </member>
        <member name="M:DarkRift.Server.ClientManager.ReserveID">
            <summary>
                Allocates a new ID.
            </summary>
            <returns>The ID allocated for the new client.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the ID is already allocated.</exception>
            <exception cref="T:System.InvalidOperationException">If there are no IDs available to allocate.</exception>
        </member>
        <member name="M:DarkRift.Server.ClientManager.HandleDisconnection(DarkRift.Server.Client,System.Boolean,System.Net.Sockets.SocketError,System.Exception)">
            <summary>
                Handles a client disconnecting.
            </summary>
            <param name="client">The client disconnecting.</param>
            <param name="localDisconnect">If the disconnection was caused by a call to <see cref="M:DarkRift.Server.Client.Disconnect"/></param>
            <param name="error">The error that caused the disconnect.</param>
            <param name="exception">The exception that caused the disconnect.</param>
        </member>
        <member name="M:DarkRift.Server.ClientManager.FinaliseClientDisconnect(System.Exception,System.Net.Sockets.SocketError,DarkRift.Server.Client,System.Int32)">
            <summary>
                Finalises the client disconnecting.
            </summary>
            <param name="exception">The exception causing the disconnect.</param>
            <param name="error">The SocketError causing the disconnect.</param>
            <param name="client">The client disconnecting.</param>
            <param name="noClients">The number of clients to report as connected</param>
        </member>
        <member name="M:DarkRift.Server.ClientManager.DropClient(DarkRift.Server.Client)">
            <summary>
                Handles a client being dropped.
            </summary>
            <param name="client">The client disconnecting.</param>
        </member>
        <member name="M:DarkRift.Server.ClientManager.GetAllClients">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.ClientManager.Item(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.ClientManager.GetClient(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.ClusterSpawnData">
            <summary>
                Details of the architecture of the cluster.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClusterSpawnData.Groups">
            <summary>
                Holds the groups in the cluster.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ClusterSpawnData.GroupsSettings">
            <summary>
                Details the groups in the cluster.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClusterSpawnData.GroupsSettings.Groups">
            <summary>
                The groups in the cluster.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ClusterSpawnData.GroupsSettings.GroupSettings">
            <summary>
                Details of a group in the cluster
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClusterSpawnData.GroupsSettings.GroupSettings.Name">
            <summary>
                The name of the group.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClusterSpawnData.GroupsSettings.GroupSettings.Visibility">
            <summary>
                Whether the server is external facing or internal facing.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClusterSpawnData.GroupsSettings.GroupSettings.ConnectsTo">
            <summary>
                The groups this group connects to.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ClusterSpawnData.GroupsSettings.GroupSettings.ConnectsToSettings">
            <summary>
                Holds details about server links.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ClusterSpawnData.GroupsSettings.GroupSettings.ConnectsToSettings.Name">
            <summary>
                The name of the group to connect to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ClusterSpawnData.GroupsSettings.GroupSettings.ConnectsToSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the groups settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ClusterSpawnData.GroupsSettings.GroupSettings.#ctor">
            <summary>
                Constructor for a new group settings instance with null values.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ClusterSpawnData.GroupsSettings.GroupSettings.#ctor(System.String,DarkRift.Server.ServerVisibility)">
            <summary>
                Constructor for a new group settings instance.
            </summary>
            <param name="name">The group name.</param>
            <param name="visibility">The group's visibility.</param>
        </member>
        <member name="M:DarkRift.Server.ClusterSpawnData.GroupsSettings.GroupSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the groups settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ClusterSpawnData.GroupsSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the groups settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ClusterSpawnData.CreateFromXml(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
                Creates a cluster spawn data from specified XML configuration file.
            </summary>
            <param name="filePath">The path of the XML file.</param>
            <param name="variables">The variables to inject into the configuration.</param>
            <returns>The ClusterSpawnData created.</returns>
        </member>
        <member name="M:DarkRift.Server.ClusterSpawnData.CreateFromXml(System.Xml.Linq.XDocument,System.Collections.Specialized.NameValueCollection)">
            <summary>
                Creates a cluster spawn data from specified XML configuration file.
            </summary>
            <param name="document">The XML file.</param>
            <param name="variables">The variables to inject into the configuration.</param>
            <returns>The ClusterSpawnData created.</returns>
        </member>
        <member name="M:DarkRift.Server.ClusterSpawnData.#ctor">
            <summary>
                Creates a new cluster spawn data with necessary settings.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ClusterSpawnData.CreateDefault">
            <summary>
                Creates a cluster with a single, default group
            </summary>
            <returns>A new default cluster.</returns>
        </member>
        <member name="T:DarkRift.Server.Command">
            <summary>
                A command that can be issued on the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Command.Name">
            <summary>
                The name of the command.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Command.Description">
            <summary>
                A description of the command.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Command.Usage">
            <summary>
                A description of the command's usage.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Command.Handler">
            <summary>
                The action to be executed when the command is invoked.
            </summary>
            <remarks>
                If the syntax of a command is incorrect a <see cref="T:DarkRift.Server.CommandSyntaxException"/> should be 
                thrown to indicate this.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Command.#ctor(System.String,System.String,System.String,System.EventHandler{DarkRift.Server.CommandEventArgs})">
            <summary>
                Creates a new command object.
            </summary>
            <param name="name">The name of the command that will be typed in at the console.</param>
            <param name="description">The description of the command for the command manual.</param>
            <param name="usage">How the command should be invoked for the command manual.</param>
            <param name="handler">The event handler that should be used if the command is invoked.</param>
        </member>
        <member name="T:DarkRift.Server.CommandEngine">
            <summary>
                Handles commands sent into the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.CommandEngine.threadHelper">
            <summary>
                The thread helper the command engine will use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.CommandEngine.pluginManager">
            <summary>
                The plugin manager this command engine will use to find handlers.
            </summary>
        </member>
        <member name="F:DarkRift.Server.CommandEngine.logger">
            <summary>
                The logger the command engine will use.
            </summary>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.#ctor(DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.PluginManager,DarkRift.Server.Logger)">
            <summary>
                Creates a new command engine.
            </summary>
            <param name="threadHelper">The thread helper the command engine will use.</param>
            <param name="pluginManager">The plugin manager this command engine will use to find handlers.</param>
            <param name="logger">The logger the command engine will use.</param>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.HandleCommand(System.String)">
            <summary>
                Invokes a command on the specified plugin.
            </summary>
            <param name="command">The command to invoke.</param>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.InvokeCommand(System.String,DarkRift.Server.Command)">
            <summary>
                Invokes the given command.
            </summary>
            <param name="rawCommand">The command as entered into the console.</param>
            <param name="command">The command to run.</param>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.BuildCommandEventArgs(System.String,DarkRift.Server.Command)">
            <summary>
                Constructs a new CommandEventArgs object from the given command.
            </summary>
            <param name="rawCommand">The command as invoked on the console.</param>
            <param name="command">The command being executed.</param>
            <returns>The event args for the event.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.FindCommand(System.String)">
            <summary>
                Searches all plugins for a given command.
            </summary>
            <param name="command">The command to search for.</param>
            <returns>The command.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.FindPluginWithCommand(System.String)">
            <summary>
                Searches all plugins for the command with the specified name.
            </summary>
            <param name="commandName">The name of the command to find.</param>
            <returns>The plugin containing the command.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetCommands">
            <summary>
                Returns all command available.
            </summary>
            <returns>The commands found.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetCommands(System.String)">
            <summary>
                Returns all command available in the given plugin.
            </summary>
            <returns>The commands found.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetIntendedPlugin(System.String)">
            <summary>
                Gets the plugin a command was intended for or null if none was specified.
            </summary>
            <param name="command">The command to parse</param>
            <returns>The name of the plugin the command is intended for.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetCommandAndArgs(System.String)">
            <summary>
                Returns the command part of a given input string.
            </summary>
            <param name="command">The command to parse.</param>
            <returns>The name and arguments of the command invoked.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetCommandName(System.String)">
            <summary>
                Returns the name of the command to be executed.
            </summary>
            <param name="command">The command to parse.</param>
            <returns>The name or the command invoked.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetArguments(System.String)">
            <summary>
                Returns the arguments of the command to be executed.
            </summary>
            <param name="command">The command to parse.</param>
            <returns>The argument string of the command invoked</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.ParseArguments(System.String)">
            <summary>
                Returns an array of raw arguments in the command invoked.
            </summary>
            <param name="arguments">The arguments part of the invocation.</param>
            <returns>The list of raw arguments for the invocation.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetArguments(System.String[])">
            <summary>
                Returns an array of arguments in the command invoked.
            </summary>
            <param name="rawArguments">The raw arguments parsed from the invocation.</param>
            <returns>The list of arguments for the invocation.</returns>
        </member>
        <member name="M:DarkRift.Server.CommandEngine.GetFlags(System.String[])">
            <summary>
                Returns the flags from the command invoked.
            </summary>
            <param name="rawArguments">The raw arguments parsed from the invocation.</param>
            <returns>The flags for the invocation.</returns>
        </member>
        <member name="T:DarkRift.Server.CommandEventArgs">
            <summary>
                Event arguments for <see cref="P:DarkRift.Server.CommandEventArgs.Command"/> callbacks.
            </summary>
        </member>
        <member name="P:DarkRift.Server.CommandEventArgs.Command">
            <summary>
                The command being executed.
            </summary>
        </member>
        <member name="P:DarkRift.Server.CommandEventArgs.OriginalCommand">
            <summary>
                The command as typed in by the user.
            </summary>
        </member>
        <member name="P:DarkRift.Server.CommandEventArgs.RawArguments">
            <summary>
                The arguments the command was called with.
            </summary>
        </member>
        <member name="P:DarkRift.Server.CommandEventArgs.Arguments">
            <summary>
                The arguments passed with the command that weren't flags.
            </summary>
        </member>
        <member name="P:DarkRift.Server.CommandEventArgs.Flags">
            <summary>
                The flags that were passed with the command.
            </summary>
        </member>
        <member name="M:DarkRift.Server.CommandEventArgs.#ctor(DarkRift.Server.Command,System.String,System.String[],System.String[],System.Collections.Specialized.NameValueCollection)">
            <summary>
                Creates a new CommandEventArgs object.
            </summary>
            <param name="command">The command being executed.</param>
            <param name="originalCommand">The command as typed in by the user.</param>
            <param name="rawArguments">The arguments the command was called with.</param>
            <param name="arguments">The arguments passed with the command that weren't flags.</param>
            <param name="flags">The flags that were passed with the command.</param>
        </member>
        <member name="M:DarkRift.Server.CommandEventArgs.HasFlag(System.String)">
            <summary>
                Returns whether the arguments contain the specified flag.
            </summary>
            <param name="name">The name of the flag.</param>
            <returns>Whether the flag is present.</returns>
        </member>
        <member name="T:DarkRift.Server.CommandSyntaxException">
            <summary>
                Exception indicating a syntax error in a command invocation.
            </summary>
        </member>
        <member name="M:DarkRift.Server.CommandSyntaxException.#ctor">
            <summary>
                Creates a new syntax error.
            </summary>
        </member>
        <member name="M:DarkRift.Server.CommandSyntaxException.#ctor(System.String)">
            <summary>
                Creates a new syntax error with a given message.
            </summary>
        </member>
        <member name="M:DarkRift.Server.CommandSyntaxException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new syntax error with a given message and inner exception.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ConfigurationFileHelper">
            <summary>
                Helper class for reading XML configuration files.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ConfigurationFileHelper.Variables">
            <summary>
                The variables to inject into configuration.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ConfigurationFileHelper.configurationDocsRoot">
            <summary>
            Root of documentation for this configuration file.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ConfigurationFileHelper.variablesDocsPage">
            <summary>
            Page in documetation for variable resolution.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.#ctor(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
                Creates a new helper with the specified variables.
            </summary>
            <param name="variables">The variables to interpolate while processing the configuration file.</param>
            <param name="configurationDocsRoot">The root of documentation for this configuration file.</param>
            <param name="variablesDocsPage">Page in documetation for variable resolution.</param>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadIPAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
                Reads an IP attribute from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The IP address read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadIPAttributeOrDefault(System.Xml.Linq.XElement,System.String,System.Net.IPAddress)">
            <summary>
                Reads an IP attribute from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="defaultValue">The default value if none is provided.</param>
            <returns>The IP address read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadIPVersionAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
                Reads an IP version value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The ip version read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadIPVersionAttributeOrDefault(System.Xml.Linq.XElement,System.String,DarkRift.IPVersion)">
            <summary>
                Reads an IP version value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="defaultValue">The default value if none is provided.</param>
            <returns>The ip version read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadBooleanAttribute(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
                Reads a Boolean value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="defaultValue">The default value to return if the attribute isn't present.</param>
            <returns>The Boolean read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadByteAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
                Reads a byte value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The byte read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadUInt16Attribute(System.Xml.Linq.XElement,System.String)">
            <summary>
                Reads a UInt16 value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The UInt16 read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadUInt16AttributeOrDefault(System.Xml.Linq.XElement,System.String,System.UInt16)">
            <summary>
                Reads a UInt16 value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="defaultValue">The default value to return if the attribute isn't present.</param>
            <returns>The UInt16 read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadUInt32AttributeOrDefault(System.Xml.Linq.XElement,System.String,System.UInt32)">
            <summary>
                Reads a UInt32 value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="defaultValue">The default value to return if the attribute isn't present.</param>
            <returns>The UInt32 read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadStringAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
                Reads a string value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The string read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadStringAttributeOrDefault(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
                Reads a string value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="defaultValue">The default value to return if the attribute isn't present.</param>
            <returns>The string read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadServerVisibilityAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
                Reads a server visibility value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The server visibility read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadLogLevelsAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
                Reads a set of log levels from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <returns>The log levels read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadLogLevelsAttributeOrDefault(System.Xml.Linq.XElement,System.String,DarkRift.LogType[])">
            <summary>
                Reads a set of log levels from the XML element supplied or returns the default.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="defaultValue">The default value to return if the attribute isn't present.</param>
            <returns>The log levels read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadDependencyResolutionStrategy(System.Xml.Linq.XElement,System.String,DarkRift.Server.DependencyResolutionStrategy)">
            <summary>
                Reads a DependencyResolutionStrategy value from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="attributeName">The name of the attribute to read.</param>
            <param name="defaultValue">The default value to return if the attribute isn't present.</param>
            <returns>The string read.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadAttributeCollectionTo(System.Xml.Linq.XElement,System.Collections.Specialized.NameValueCollection)">
            <summary>
                Reads a collection of attributes from the XML element supplied.
            </summary>
            <param name="element">The element to read from.</param>
            <param name="collection">The collection to read into.</param>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ReadElementCollectionTo``1(System.Xml.Linq.XElement,System.String,System.Func{System.Xml.Linq.XElement,``0},System.Collections.Generic.ICollection{``0})">
            <summary>
                Reads a collection of elements from the XML element supplied.
            </summary>
            <typeparam name="T">The type of the elements to read.</typeparam>
            <param name="element">The element to read from.</param>
            <param name="elementName">The name of the child elements to parse.</param>
            <param name="parseFunction">The function to parse each child element.</param>
            <param name="collection">The collection to write the elements to.</param>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.ResolveVariables(System.String,System.Xml.IXmlLineInfo)">
            <summary>
                Resolves variables to their values in the given string.
            </summary>
            <param name="str">The string to resolve variables in.</param>
            <param name="lineInfo">The line information about where this resolution is occuring.</param>
            <returns>The resolved string.</returns>
        </member>
        <member name="M:DarkRift.Server.ConfigurationFileHelper.GetRequiredElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns a child element or throws an exception if not present.
            </summary>
            <param name="from">The element to load from.</param>
            <param name="name">The name of the child element to return.</param>
            <returns>The child element.</returns>
        </member>
        <member name="T:DarkRift.Server.DarkRiftInfo">
            <summary>
                Class containing info about the DarkRift server running.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftInfo.StartTime">
            <summary>
                The time the server was started.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftInfo.Version">
            <summary>
                The version of the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftInfo.DocumentationRoot">
            <summary>
            The root URL of the server's documentation.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftInfo.Type">
            <summary>
                The type of server running.
            </summary>
        </member>
        <member name="T:DarkRift.Server.DarkRiftInfo.ServerType">
            <summary>
                The type of server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftInfo.ServerType.Free">
            <summary>
                Indicates the server is the free version.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftInfo.ServerType.Pro">
            <summary>
                Indicates the server is paid for. Yay!
            </summary>
        </member>
        <member name="M:DarkRift.Server.DarkRiftInfo.#ctor(System.DateTime)">
            <summary>
                Creates a new DarkRiftInfo object.
            </summary>
            <param name="startTime">The time the server was started</param>
        </member>
        <member name="T:DarkRift.Server.DarkRiftServer">
            <summary>
                The main server class.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.LogManager">
            <summary>
                The manager for logs.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.MetricsManager">
            <summary>
                The manager for metrics.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.ClientManager">
            <summary>
                The client manager handling all clients on this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.PluginManager">
            <summary>
                The manager for all plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.NetworkListenerManager">
            <summary>
                The manager for all listeners.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.DatabaseManager">
            <summary>
                The manager for databases.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.Dispatcher">
            <summary>
                The server's dispatcher.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.DispatcherWaitHandle">
            <summary>
                The dispatcher's wait handle.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.EventsFromDispatcher">
            <summary>
                Whether events are executed through the dispatcher or not.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.ThreadHelper">
            <summary>
                The thread helper for use with events.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.ServerInfo">
            <summary>
                Information about this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.BadWordFilter">
            <summary>
                Helper plugin for filtering bad words out of text.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.ServerRegistryConnectorManager">
            <summary>
                The server registry connector manager.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.RemoteServerManager">
            <summary>
                The server manager for remote servers.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.Loaded">
            <summary>
                Whether this server has been loaded yet.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.InternalPluginManager">
            <summary>
                The server plugin manager.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.InternalClientManager">
            <summary>
                The client manager handling all clients on this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.CommandEngine">
            <summary>
                The handler for all commands issued from the user.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.DataManager">
            <summary>
                The manager for server data.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.InternalRemoteServerManager">
            <summary>
                The server manager for remote servers.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftServer.internalServerRegistryConnectorManager">
            <summary>
                The server registry connector manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftServer.networkListenerManager">
            <summary>
                The server listener manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftServer.logManager">
            <summary>
                The manager for logs.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftServer.metricsManager">
            <summary>
                The manager for metrics.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftServer.pluginFactory">
            <summary>
                The factory for plugins.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftServer.dispatcher">
            <summary>
                The dispatcher for the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftServer.Disposed">
            <summary>
                Whether this server has been disposed yet.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftServer.disposed">
            <summary>
                Whether this server has been disposed yet.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DarkRiftServer.logger">
            <summary>
                The server's main logger.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.#ctor(DarkRift.Server.ServerSpawnData)">
            <summary>
                Creates a new server given spawn details and a default cluster.
            </summary>
            <param name="spawnData">The details of how to start the server.</param>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.#ctor(DarkRift.Server.ServerSpawnData,DarkRift.Server.ClusterSpawnData)">
            <summary>
                Creates a new server given spawn details.
            </summary>
            <param name="spawnData">The details of how to start the server.</param>
            <param name="clusterSpawnData">The details of the cluster this server is part of.</param>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.Start">
            <summary>
                Starts the server.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.StartServer">
            <summary>
                Starts the server propagating any exceptions raised during startup.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.ExecuteDispatcherTasks">
            <summary>
                Executes all tasks waiting in the dispatcher.
            </summary>
            <remarks>
                This must be invoked from the same thread that constructs the server since this is deemed the 'main' thread.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.ExecuteCommand(System.String)">
            <summary>
                Executes a given command on the server.
            </summary>
            <param name="command">The command to execute.</param>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.CreateOneShotTimer(System.Int32,System.Action{DarkRift.Server.Timer})">
            <summary>
                Creates a new timer that will invoke the callback a single time.
            </summary>
            <param name="delay">The delay in milliseconds before invoking the callback.</param>
            <param name="callback">The callback to invoke.</param>
            <returns>The new timer.</returns>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.CreateTimer(System.Int32,System.Int32,System.Action{DarkRift.Server.Timer})">
            <summary>
                Creates a new timer that will invoke the callback repeatedly until stopped.
            </summary>
            <param name="initialDelay">The delay in milliseconds before invoking the callback the first time.</param>
            <param name="repetitionPeriod">The delay in milliseconds between future invocations.</param>
            <param name="callback">The callback to invoke.</param>
            <returns>The new timer.</returns>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.MakeThreadSafe">
            <summary>
                Forces the server to invoke events through the dispatcher.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DarkRiftServer.Dispose">
            <summary>
                Disposes of the server.
            </summary>
        </member>
        <member name="T:DarkRift.Server.DarkRiftThreadHelper">
            <summary>
                Thread helper class for DarkRift.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftThreadHelper.EventsFromDispatcher">
            <summary>
                Whether events are executed through the dispatcher or not.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftThreadHelper.Dispatcher">
            <summary>
                The dispatcher for the server.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DarkRiftThreadHelper.#ctor(System.Boolean,DarkRift.Dispatching.Dispatcher)">
            <summary>
                Creates a new thread helper with the given invocation settings.
            </summary>
            <param name="eventsFromDispatcher">Whether events should be invoked from the dispatcher.</param>
            <param name="dispatcher">The dispatcher to use.</param>
        </member>
        <member name="M:DarkRift.Server.DarkRiftThreadHelper.DispatchIfNeeded(System.Action)">
            <summary>
                Helper method to run code from the dispatcher if <see cref="P:DarkRift.Server.DarkRiftThreadHelper.EventsFromDispatcher"/> is set.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:DarkRift.Server.DarkRiftThreadHelper.DispatchIfNeeded(System.Action,DarkRift.Dispatching.ActionDispatchCompleteCallback)">
            <summary>
                Helper method to run code from the dispatcher if <see cref="P:DarkRift.Server.DarkRiftThreadHelper.EventsFromDispatcher"/> is set.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="callback">The callback to invoke once this is complete.</param>
            <remarks>If the task was run synchronously then the argument to callback will be null as no task was created.</remarks>
        </member>
        <member name="M:DarkRift.Server.DarkRiftThreadHelper.ExponentialBackoff(System.Action{DarkRift.Server.DarkRiftThreadHelper.ExponentialBackoffContext},System.Int32,System.Action{System.Exception})">
            <summary>
                Exponentially backs off a task
            </summary>
            <param name="action">The action to try to perform.</param>
            <param name="retries">The maximum number of retries to allow.</param>
            <param name="failureCallback">The callback to invoke if retries are exhausted, with the last exception thrown.</param>
        </member>
        <member name="M:DarkRift.Server.DarkRiftThreadHelper.RunAfterDelay(System.Int32,System.Action{DarkRift.Server.Timer})">
            <summary>
                Creates a new timer that will invoke the callback a single time.
            </summary>
            <param name="delay">The delay in milliseconds before invoking the callback.</param>
            <param name="callback">The callback to invoke.</param>
            <returns>The new timer.</returns>
        </member>
        <member name="M:DarkRift.Server.DarkRiftThreadHelper.CreateTimer(System.Int32,System.Int32,System.Action{DarkRift.Server.Timer})">
            <summary>
                Creates a new timer that will invoke the callback repeatedly until stopped.
            </summary>
            <param name="initialDelay">The delay in milliseconds before invoking the callback the first time.</param>
            <param name="repetitionPeriod">The delay in milliseconds between future invocations.</param>
            <param name="callback">The callback to invoke.</param>
            <returns>The new timer.</returns>
        </member>
        <member name="T:DarkRift.Server.DarkRiftThreadHelper.ExponentialBackoffContext">
            <summary>
                Class containing contextual information for an exponential backoff.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftThreadHelper.ExponentialBackoffContext.Tries">
            <summary>
                The number of tries attempted so far.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftThreadHelper.ExponentialBackoffContext.MaxRetries">
            <summary>
                The maximum number of retries that will be attempted.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DarkRiftThreadHelper.ExponentialBackoffContext.BaseDelay">
            <summary>
                The delay the exponential backoff was started with.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DarkRiftThreadHelper.ExponentialBackoffContext.#ctor(System.Int32,System.Int32)">
            <summary>
                Creates a new ExponentialBackoffContext.
            </summary>
            <param name="maxRetries">The maximum number of retries that will be performed.</param>
            <param name="baseDelay">The delay to apply of first failure.</param>
        </member>
        <member name="T:DarkRift.Server.DatabaseManager">
            <summary>
                Manages the connection strings used by server plugins.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DatabaseManager.connectionStrings">
            <summary>
                The connection strings we are aware of.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DatabaseManager.GetConnectionString(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.DatabaseManager.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.DataManager">
            <summary>
                Handles the persistent data for a DarkRift instance.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DataManager.pluginsFileName">
            <summary>
                The name of the plugins DB file.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DataManager.pluginsFileMutex">
            <summary>
                The name of the plugins DB mutex.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DataManager.dataDirectory">
            <summary>
                The directory for storing data in.
            </summary>
        </member>
        <member name="T:DarkRift.Server.DataManager.LockedFile">
            <summary>
                Class encapsulating the legacy locking functionality
            </summary>
        </member>
        <member name="F:DarkRift.Server.DataManager.LockedFile.stream">
            <summary>
                The file stream to the file.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DataManager.LockedFile.mutex">
            <summary>
                The legacy mutex for the file locking.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DataManager.LockedFile.reader">
            <summary>
                Returns the reader for the stream.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DataManager.LockedFile.writer">
            <summary>
                Returns the writer for the stream.
            </summary>
        </member>
        <member name="P:DarkRift.Server.DataManager.LockedFile.IsEmpty">
            <summary>
                Returns whether the file is empty or not.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DataManager.LockedFile.#ctor(System.String,System.Threading.Mutex)">
            <summary>
                Creates a new wrapper for the file specified and aquires the lock.
            </summary>
            <param name="filename">The file to aquire.</param>
            <param name="fileMutex">The legacy mutex for the file locking.</param>
        </member>
        <member name="M:DarkRift.Server.DataManager.LockedFile.Load">
            <summary>
                Returns the file as an XDocument.
            </summary>
            <returns>The XDocument for the file.</returns>
        </member>
        <member name="M:DarkRift.Server.DataManager.LockedFile.Save(System.Xml.Linq.XDocument)">
            <summary>
                Writes the XDocument to the file.
            </summary>
            <param name="document">The XDocument to save.</param>
        </member>
        <member name="M:DarkRift.Server.DataManager.LockedFile.Dispose">
            <summary>
                Releases the locks on the file.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DataManager.GetResourceDirectory(System.String)">
            <summary>
                Gets the location of a plugins resources directory.
            </summary>
            <param name="pluginName">The name of the plugin.</param>
            <returns>The path to the resource directory.</returns>
        </member>
        <member name="M:DarkRift.Server.DataManager.CreateResourceDirectory(System.String)">
            <summary>
                Creates the resource directory for a plugin if it doesn't exist.
            </summary>
            <param name="pluginName">The name of the plugin.</param>
        </member>
        <member name="M:DarkRift.Server.DataManager.DeleteResourceDirectory(System.String)">
            <summary>
                Deletes the resource directory for a plugin.
            </summary>
            <param name="pluginName">The name of the plugin.</param>
        </member>
        <member name="M:DarkRift.Server.DataManager.ReadAndSetPluginRecord(System.String,System.Version)">
            <summary>
                Atomically reads a plugin record and updates the fields as specified or
                creates a new record if not present.
            </summary>
            <param name="name">The plugin to read and set.</param>
            <param name="version">The version to update the record to.</param>
        </member>
        <member name="M:DarkRift.Server.DataManager.ReadPluginRecord(System.String)">
            <summary>
                Reads a record from the plugin metadata.
            </summary>
            <param name="name">The name fo the plugin.</param>
            <returns>The plugin record.</returns>
        </member>
        <member name="M:DarkRift.Server.DataManager.ReadAllPluginRecords">
            <summary>
                Returns all records in the plugins table.
            </summary>
            <returns>The records stored.</returns>
        </member>
        <member name="M:DarkRift.Server.DataManager.DeletePluginRecord(System.String)">
            <summary>
                Deletes a record from the plugin table.
            </summary>
            <param name="name">The plugin to delete.</param>
        </member>
        <member name="M:DarkRift.Server.DataManager.CreatePluginsTable">
            <summary>
                Creates a new table for storing plugin metadata.
            </summary>
        </member>
        <member name="T:DarkRift.Server.DependencyResolutionStrategy">
            <summary>
            The way that dependencies of a plugin will be found.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DependencyResolutionStrategy.Standard">
            <summary>
            Uses the standard .NET assembly resolution with no enhancements.
            </summary>
            <remarks>
            This strategy will search for dependencies for using the standard .NET rules detailed <see cref="!:https://docs.microsoft.com/en-us/dotnet/framework/deployment/how-the-runtime-locates-assemblies">here</see>.
            </remarks>
        </member>
        <member name="F:DarkRift.Server.DependencyResolutionStrategy.RecursiveFromFile">
            <summary>
            Recursively searches all subdirectories of each file's containing folder in addition to the standard .NET assembly resolution.
            </summary>
            <remarks>
            This strategy will search for dependencies for using the standard .NET rules detailed <see cref="!:https://docs.microsoft.com/en-us/dotnet/framework/deployment/how-the-runtime-locates-assemblies">here</see> but with additional steps to search through each discovered file's containing folder and any subdirectory of it.
            </remarks>
        </member>
        <member name="F:DarkRift.Server.DependencyResolutionStrategy.RecursiveFromDirectory">
            <summary>
            Recursively searches all subdirectories of the folder's containing folder in addition to the standard .NET assembly resolution.
            </summary>
            <remarks>
            This strategy will search for dependencies for using the standard .NET rules detailed <see cref="!:https://docs.microsoft.com/en-us/dotnet/framework/deployment/how-the-runtime-locates-assemblies">here</see> but with additional steps to search through the specified directory and any subdirectory of it. This cannot be used when using a path to a file.
            </remarks>
        </member>
        <member name="E:DarkRift.Server.DownstreamRemoteServer.MessageReceived">
            <inheritdoc />
        </member>
        <member name="E:DarkRift.Server.DownstreamRemoteServer.ServerConnected">
            <inheritdoc />
        </member>
        <member name="E:DarkRift.Server.DownstreamRemoteServer.ServerDisconnected">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.DownstreamRemoteServer.ConnectionState">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.DownstreamRemoteServer.RemoteEndPoints">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.DownstreamRemoteServer.ServerGroup">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.DownstreamRemoteServer.ID">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.DownstreamRemoteServer.Host">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.DownstreamRemoteServer.Port">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.DownstreamRemoteServer.ServerConnectionDirection">
            <inheritdoc />
        </member>
        <member name="F:DarkRift.Server.DownstreamRemoteServer.connection">
            <summary>
                The connection to the remote server.
            </summary>
            <remarks>
                Will change reference on reconnections. Currently this is not marked volatile as that is a very exceptional circumstance and at that point
                was can likely tolerate just waiting for something else to synchronise caches later.
            </remarks>
        </member>
        <member name="F:DarkRift.Server.DownstreamRemoteServer.serverGroup">
            <summary>
                The server group we are part of.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamRemoteServer.threadHelper">
            <summary>
                The thread helper to use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamRemoteServer.logger">
            <summary>
                The logger to use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamRemoteServer.messagesSentCounter">
            <summary>
                Counter metric of the number of messages sent.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamRemoteServer.messagesReceivedCounter">
            <summary>
                Counter metric of the number of messages received.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamRemoteServer.messageReceivedEventTimeHistogram">
            <summary>
                Histogram metric of the time taken to execute the <see cref="E:DarkRift.Server.DownstreamRemoteServer.MessageReceived"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamRemoteServer.messageReceivedEventFailuresCounter">
            <summary>
                Counter metric of failures executing the <see cref="E:DarkRift.Server.DownstreamRemoteServer.MessageReceived"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamRemoteServer.serverConnectedEventTimeHistogram">
            <summary>
                Histogram metric of time taken to execute the <see cref="E:DarkRift.Server.DownstreamRemoteServer.ServerConnected"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamRemoteServer.serverDisconnectedEventTimeHistogram">
            <summary>
                Histogram metric of time taken to execute the <see cref="E:DarkRift.Server.DownstreamRemoteServer.ServerDisconnected"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamRemoteServer.serverConnectedEventFailuresCounter">
            <summary>
                Counter metric of failures executing the <see cref="E:DarkRift.Server.DownstreamRemoteServer.ServerConnected"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamRemoteServer.serverDisconnectedEventFailuresCounter">
            <summary>
                Counter metric of failures executing the <see cref="E:DarkRift.Server.DownstreamRemoteServer.ServerDisconnected"/> event.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DownstreamRemoteServer.#ctor(System.UInt16,System.String,System.UInt16,DarkRift.Server.DownstreamServerGroup,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.Logger,DarkRift.Server.Metrics.MetricsCollector)">
            <summary>
                Creates a new remote server.
            </summary>
            <param name="id">The ID of the server.</param>
            <param name="host">The host connected to.</param>
            <param name="port">The port connected to.</param>
            <param name="group">The group the server belongs to.</param>
            <param name="threadHelper">The thread helper to use.</param>
            <param name="logger">The logger to use.</param>
            <param name="metricsCollector">The metrics collector to use.</param>
        </member>
        <member name="M:DarkRift.Server.DownstreamRemoteServer.SetConnection(DarkRift.Server.PendingDownstreamRemoteServer)">
            <summary>
                Sets the connection being used by this remote server.
            </summary>
            <param name="pendingServer">The connection to switch to.</param>
        </member>
        <member name="M:DarkRift.Server.DownstreamRemoteServer.SendMessage(DarkRift.Message,DarkRift.SendMode)">
            <summary>
                Sends a message to the server.
            </summary>
            <param name="message">The message to send.</param>
            <param name="sendMode">How the message should be sent.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="M:DarkRift.Server.DownstreamRemoteServer.GetRemoteEndPoint(System.String)">
            <summary>
                Gets the endpoint with the given name.
            </summary>
            <param name="name">The name of the endpoint.</param>
            <returns>The end point.</returns>
        </member>
        <member name="M:DarkRift.Server.DownstreamRemoteServer.MessageReceivedHandler(DarkRift.MessageBuffer,DarkRift.SendMode)">
            <summary>
                Callback for when data is received.
            </summary>
            <param name="buffer">The data recevied.</param>
            <param name="sendMode">The SendMode used to send the data.</param>
        </member>
        <member name="M:DarkRift.Server.DownstreamRemoteServer.HandleMessage(DarkRift.Message,DarkRift.SendMode)">
            <summary>
                Handles a message received.
            </summary>
            <param name="message">The message that was received.</param>
            <param name="sendMode">The send mode the emssage was received with.</param>
        </member>
        <member name="M:DarkRift.Server.DownstreamRemoteServer.DisconnectedHandler(System.Net.Sockets.SocketError,System.Exception)">
            <summary>
            Called when the connection is lost.
            </summary>
            <param name="error">The socket error that ocurred</param>
            <param name="exception">The exception that ocurred.</param>
        </member>
        <member name="M:DarkRift.Server.DownstreamRemoteServer.DropConnection">
            <summary>
                Disconnects the connection without calling back to the server manager.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DownstreamRemoteServer.Dispose">
            <summary>
                Disposes of the connection.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DownstreamRemoteServer.Dispose(System.Boolean)">
            <summary>
                Handles disposing of the connection.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:DarkRift.Server.DownstreamServerGroup.Direction">
            <inheritdoc />
        </member>
        <member name="F:DarkRift.Server.DownstreamServerGroup.threadHelper">
            <summary>
                The server's thread helper.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamServerGroup.logger">
            <summary>
                The logger to use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamServerGroup.remoteServerLogger">
            <summary>
            The logger to pass to created remote servers.
            </summary>
        </member>
        <member name="F:DarkRift.Server.DownstreamServerGroup.remoteServerMetricsCollector">
            <summary>
            The metrics collector to pass to created remote servers.
            </summary>
        </member>
        <member name="M:DarkRift.Server.DownstreamServerGroup.#ctor(System.String,DarkRift.Server.ServerVisibility,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.Logger,DarkRift.Server.Logger,DarkRift.Server.Metrics.MetricsCollector,DarkRift.Server.Metrics.MetricsCollector)">
            <summary>
                Creates a new downstream connected server group
            </summary>
            <param name="name">The name of the group.</param>
            <param name="visibility">The groups visibility.</param>
            <param name="threadHelper">The server's thread helper.</param>
            <param name="logger">The logger to use.</param>
            <param name="remoteServerLogger">The logger to pass to created remote servers.</param>
            <param name="metricsCollector">The metrics collector to use.</param>
            <param name="remoteServerMetricsCollector">The metrics collector to pass to created remote servers.</param>
        </member>
        <member name="M:DarkRift.Server.DownstreamServerGroup.HandleServerJoin(System.UInt16,System.String,System.UInt16,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.DownstreamServerGroup.HandleServerLeave(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.DownstreamServerGroup.DisconnectedHandler(DarkRift.Server.DownstreamRemoteServer,System.Exception)">
            <summary>
                Handles a server disconnecting.
            </summary>
            <param name="remoteServer">The server that the connection was for.</param>
            <param name="exception">The exception that caused the disconnection.</param>
        </member>
        <member name="T:DarkRift.Server.ExtendedPluginBase">
            <summary>
                Base class for plugins with additional privileges.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ExtendedPluginBase.ThreadSafe">
            <summary>
                Is this plugin able to handle multithreaded events?
            </summary>
            <remarks>
                Enabling this option allows DarkRift to send messages to your plugin from multiple threads simultaneously, 
                greatly increasing performance. Do not enable this unless you are confident that you understand 
                multithreading else you will find yourself with a variety of unfriendly problems to fix!
            </remarks>
        </member>
        <member name="P:DarkRift.Server.ExtendedPluginBase.Commands">
            <summary>
                The commands the plugin has.
            </summary>
            <remarks>
                This is an array of commands that can be executed by this plugin and will be searched through when the 
                command is executed. Changes to this array will be reflected instantly by the command system.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.ExtendedPluginBase.MetricsManager">
            <summary>
            The server's metrics manager.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.ExtendedPluginBase.MetricsCollector">
            <summary>
                Metrics collector for the plugin.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="F:DarkRift.Server.ExtendedPluginBase.writeEventHandler">
            <summary>
                The handler for writing events.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginBase.#ctor(DarkRift.Server.ExtendedPluginBaseLoadData)">
            <summary>
                Constructor taking extended load data.
            </summary>
            <param name="pluginLoadData">The load data for the plugins.</param>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginBase.WriteEvent(System.String,DarkRift.LogType,System.Exception)">
            <summary>
                Writes an event to the server's logs.
            </summary>
            <param name="message">The message to write.</param>
            <param name="logType">The type of message to write.</param>
            <param name="exception">The exception that occurred (if there was one).</param>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginBase.Loaded(DarkRift.Server.LoadedEventArgs)">
            <summary>
                Method that will be called when the server and all plugins have loaded.
            </summary>
            <param name="args">The details of the load.</param>
            <remarks>Pro only.</remarks>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginBase.Install(DarkRift.Server.InstallEventArgs)">
            <summary>
                Method that will be called when the plugin is installed.
            </summary>
            <param name="args">The details of the installation.</param>
            <remarks>Pro only.</remarks>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginBase.Upgrade(DarkRift.Server.UpgradeEventArgs)">
            <summary>
                Method that will be called when the plugin is upgraded.
            </summary>
            <param name="args">The details of the upgrade.</param>
            <remarks>Pro only.</remarks>
        </member>
        <member name="T:DarkRift.Server.ExtendedPluginBaseLoadData">
            <summary>
                Base load data class for plugins inheriting <see cref="T:DarkRift.Server.ExtendedPluginBase"/>.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ExtendedPluginBaseLoadData.MetricsManager">
            <summary>
                The server's metrics manager.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.ExtendedPluginBaseLoadData.MetricsCollector">
            <summary>
                The metrics collector this plugin will use.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.ExtendedPluginBaseLoadData.WriteEventHandler">
            <summary>
                The handler for writing events via <see cref="M:DarkRift.Server.ExtendedPluginBase.WriteEvent(System.String,DarkRift.LogType,System.Exception)"/>.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginBaseLoadData.#ctor(System.String,System.Collections.Specialized.NameValueCollection,DarkRift.Server.DarkRiftInfo,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.Logger)">
            <summary>
                Creates new load data with the given properties.
            </summary>
            <param name="name">The name of the plugin.</param>
            <param name="settings">The settings to pass the plugin.</param>
            <param name="serverInfo">The runtime details about the server.</param>
            <param name="threadHelper">The server's thread helper.</param>
            <param name="logger">The logger this plugin will use.</param>
            <remarks>
                This constructor ensures that the legacy <see cref="P:DarkRift.Server.ExtendedPluginBaseLoadData.WriteEventHandler"/> field is initialised to <see cref="M:DarkRift.Server.Logger.Log(System.String,DarkRift.LogType,System.Exception)"/> for backwards compatibility.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginBaseLoadData.#ctor(System.String,System.Collections.Specialized.NameValueCollection,DarkRift.Server.DarkRiftInfo,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.WriteEventHandler)">
            <summary>
                Creates new load data with the given properties.
            </summary>
            <param name="name">The name of the plugin.</param>
            <param name="settings">The settings to pass the plugin.</param>
            <param name="serverInfo">The runtime details about the server.</param>
            <param name="threadHelper">The server's thread helper.</param>
            <param name="writeEventHandler"><see cref="P:DarkRift.Server.ExtendedPluginBaseLoadData.WriteEventHandler"/> for logging.</param>
        </member>
        <member name="T:DarkRift.Server.ExtendedPluginManagerBase`1">
            <summary>
                Base plugin manager for plugin managers handling <see cref="T:DarkRift.Server.ExtendedPluginBase"/> types.
            </summary>
            <typeparam name="T">The type of plugin being managed.</typeparam>
        </member>
        <member name="F:DarkRift.Server.ExtendedPluginManagerBase`1.server">
            <summary>
                The server that owns this plugin manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ExtendedPluginManagerBase`1.dataManager">
            <summary>
                The server's datamanager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ExtendedPluginManagerBase`1.logger">
            <summary>
                The logger for this manager.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginManagerBase`1.#ctor(DarkRift.Server.DarkRiftServer,DarkRift.Server.DataManager,DarkRift.Server.PluginFactory,DarkRift.Server.Logger)">
            <summary>
                Creates a new ExtendedPluginManagerBase.
            </summary>
            <param name="server">The server that owns this plugin manager.</param>
            <param name="dataManager">The server's datamanager.</param>
            <param name="pluginFactory">The server's plugin factory.</param>
            <param name="logger">The logger for this manager.</param>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginManagerBase`1.LoadPlugin(System.String,System.Type,DarkRift.Server.PluginBaseLoadData,DarkRift.Server.PluginLoadData,System.Boolean)">
            <summary>
                Load the plugin given.
            </summary>
            <param name="name">The name of the plugin instance.</param>
            <param name="type">The plugin type to load.</param>
            <param name="pluginLoadData">The data for this plugin.</param>
            <param name="backupLoadData">The data for this plugin if the first fails.</param>
            <param name="createResourceDirectory">Whether to create a resource directory or not.</param>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginManagerBase`1.LoadPlugin(System.String,System.String,DarkRift.Server.PluginBaseLoadData,DarkRift.Server.PluginLoadData,System.Boolean)">
            <summary>
                Load the plugin given.
            </summary>
            <param name="name">The name of the plugin instance.</param>
            <param name="type">The plugin type to load.</param>
            <param name="pluginLoadData">The data for this plugin.</param>
            <param name="backupLoadData">The data for this plugin if the first fails.</param>
            <param name="createResourceDirectory">Whether to create a resource directory or not.</param>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginManagerBase`1.HandleThreadSafe(`0)">
            <summary>
                Make server threadsafe if necessary
            </summary>
            <param name="plugin">The plugin to check.</param>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginManagerBase`1.HandleInstallUpgrade(`0)">
            <summary>
                Install/upgrade the loaded plugin.
            </summary>
            <param name="plugin">The plugin to check.</param>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginManagerBase`1.GetInstalledVersion(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginManagerBase`1.Uninstall(System.String)">
            <summary>
                Uninstalls a plugin by name, it cannot be currently operating.
            </summary>
            <param name="name">The name of the plugin to uninstall.</param>
        </member>
        <member name="M:DarkRift.Server.ExtendedPluginManagerBase`1.Loaded">
            <summary>
                Invokes the Loaded event on all plugins.
            </summary>
            <remarks>
                <see cref="P:DarkRift.Server.DarkRiftServer.Loaded"/> must be true when this is invoked.
            </remarks>
        </member>
        <member name="T:DarkRift.Server.IClient">
            <summary>
                Server representation of a client.
            </summary>
        </member>
        <member name="E:DarkRift.Server.IClient.StrikeOccured">
            <summary>
                Called when the client is given a strike for illegal behaviour.
            </summary>
            <remarks><c>Pro only.</c> </remarks>
        </member>
        <member name="P:DarkRift.Server.IClient.ID">
            <summary>
                The ID of the client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClient.RemoteTcpEndPoint">
            <summary>
                The remote end point we are connected to on TCP.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClient.RemoteUdpEndPoint">
            <summary>
                The remote end point we are connected to UDP.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClient.IsConnected">
            <summary>
                Is this client still available?
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClient.ConnectionState">
            <summary>
                The state of the connection;
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClient.Strikes">
            <summary>
                The number of illegal behaviours this client has made.
            </summary>
            <remarks>
                <legacyBold>Setter only available in Pro.</legacyBold>
            </remarks>
        </member>
        <member name="P:DarkRift.Server.IClient.ConnectionTime">
            <summary>
                The time this client connected to the server.
            </summary>
            <remarks>
                <c>Pro only.</c> 
            </remarks>
        </member>
        <member name="P:DarkRift.Server.IClient.MessagesSent">
            <summary>
                The number of messages sent from the server.
            </summary>
            <remarks>
                <c>Pro only.</c> 
            </remarks>
        </member>
        <member name="P:DarkRift.Server.IClient.MessagesPushed">
            <summary>
                The number of messages pushed from the server.
            </summary>
            <remarks>
                <c>Pro only.</c> 
            </remarks>
        </member>
        <member name="P:DarkRift.Server.IClient.MessagesReceived">
            <summary>
                The number of messages received at the server.
            </summary>
            <remarks>
                <c>Pro only.</c> 
            </remarks>
        </member>
        <member name="P:DarkRift.Server.IClient.RemoteEndPoints">
            <summary>
                The collection of end points this client is connected to.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClient.RoundTripTime">
            <summary>
                The round trip time helper for this client.
            </summary>
        </member>
        <member name="M:DarkRift.Server.IClient.Disconnect">
            <summary>
                Disconnects this client from the server.
            </summary>
            <returns>Whether the disconnect was successful.</returns>
        </member>
        <member name="M:DarkRift.Server.IClient.GetRemoteEndPoint(System.String)">
            <summary>
                Gets the remote end point with the given name.
            </summary>
            <param name="name">The end point name.</param>
            <returns>The end point.</returns>
        </member>
        <member name="M:DarkRift.Server.IClient.Strike(System.String)">
            <summary>
                Strikes this client.
            </summary>
            <param name="message">A message describing the reason for the strike.</param>
            <remarks>
                <c>Pro only.</c> 
            </remarks>
        </member>
        <member name="M:DarkRift.Server.IClient.Strike(System.String,System.Int32)">
            <summary>
                Strikes this client.
            </summary>
            <param name="message">A message describing the reason for the strike.</param>
            <param name="weight">The number of strikes this accounts for.</param>
            <remarks>
                <c>Pro only.</c> 
            </remarks>
        </member>
        <member name="T:DarkRift.Server.IClientManager">
            <summary>
                Interface for the connection manager handling connections for the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClientManager.Address">
            <summary>
                The address he server is listening on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClientManager.IPVersion">
            <summary>
                The IP version that the server is listening on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClientManager.Port">
            <summary>
                The port the server is listening on.
            </summary>
        </member>
        <member name="E:DarkRift.Server.IClientManager.ClientConnected">
            <summary>
                Invoked when a client connects to the server.
            </summary>
        </member>
        <member name="E:DarkRift.Server.IClientManager.ClientDisconnected">
            <summary>
                Invoked when a client disconnects from the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClientManager.Count">
            <summary>
                Returns the number of clients currently connected.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IClientManager.MaxStrikes">
            <summary>
                The number of strikes a client can get before they are kicked.
            </summary>
        </member>
        <member name="M:DarkRift.Server.IClientManager.GetAllClients">
            <summary>
                Returns all clients connected to this server.
            </summary>
            <returns>An array of clients on the server.</returns>
        </member>
        <member name="P:DarkRift.Server.IClientManager.Item(System.UInt16)">
            <summary>
                Returns the client with the given ID.
            </summary>
            <param name="id">The global ID of the client.</param>
            <returns>The client.</returns>
        </member>
        <member name="M:DarkRift.Server.IClientManager.GetClient(System.UInt16)">
            <summary>
                Returns the client with the given ID.
            </summary>
            <param name="id">The global ID of the client.</param>
            <returns>The client.</returns>
        </member>
        <member name="T:DarkRift.Server.IDatabaseManager">
            <summary>
                Manages the connection strings used by server plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IDatabaseManager.Item(System.String)">
            <summary>
                Gets a connection string defined in the configuration file. 
            </summary>
            <param name="providerName">The name of the connection string.</param>
            <returns>
                The connection string.
            </returns>
        </member>
        <member name="M:DarkRift.Server.IDatabaseManager.GetConnectionString(System.String)">
            <summary>
                Gets a connection string defined in the configuration file. 
            </summary>
            <param name="providerName">The name of the connection string.</param>
            <returns>
                The connection string.
            </returns>
        </member>
        <member name="T:DarkRift.Server.ILogManager">
            <summary>
                An object that manages the server's log writers.
            </summary>
            <remarks>
                <c>Pro only.</c> 
            </remarks>
        </member>
        <member name="M:DarkRift.Server.ILogManager.GetLogWriterByName(System.String)">
            <summary>
                Searches for a log writer by its name.
            </summary>
            <param name="name">The name of the log writer to find.</param>
            <returns>The log writer.</returns>
        </member>
        <member name="M:DarkRift.Server.ILogManager.GetLogWriterByType``1">
            <summary>
                Searches for log writers by their type.
            </summary>
            <typeparam name="T">The type of the log writer to find.</typeparam>
            <returns>The log writer found.</returns>
        </member>
        <member name="M:DarkRift.Server.ILogManager.GetLogWritersByType``1">
            <summary>
                Searches for log writers by their type.
            </summary>
            <typeparam name="T">The type of the log writer to find.</typeparam>
            <returns>The log writers.</returns>
        </member>
        <member name="P:DarkRift.Server.ILogManager.Item(System.String)">
            <summary>
                Gets a log writer by its name.
            </summary>
            <param name="name">The name of the log writer to find.</param>
            <returns>The log writer.</returns>
        </member>
        <member name="M:DarkRift.Server.ILogManager.GetLoggerFor(System.String)">
            <summary>
                Returns a logger for the given component.
            </summary>
            <param name="name">The name of the component to log for.</param>
        </member>
        <member name="T:DarkRift.Server.IMessageSinkSource">
            <summary>
                Interface for places messages can be sent to and from.
            </summary>
        </member>
        <member name="E:DarkRift.Server.IMessageSinkSource.MessageReceived">
            <summary>
                Event fired when a message is received from this entity.
            </summary>
        </member>
        <member name="M:DarkRift.Server.IMessageSinkSource.SendMessage(DarkRift.Message,DarkRift.SendMode)">
            <summary>
                Sends a message to the client.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="sendMode">How the message should be sent.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="T:DarkRift.Server.IModifiableServerGroup">
            <summary>
                Internal varient of IServerGroup that allows servers to join and leave.
            </summary>
        </member>
        <member name="M:DarkRift.Server.IModifiableServerGroup.HandleServerJoin(System.UInt16,System.String,System.UInt16,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Handles a new server joining this group.
            </summary>
            <param name="id">The id of the server.</param>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="properties">The additional properties to connect with.</param>
        </member>
        <member name="M:DarkRift.Server.IModifiableServerGroup.HandleServerLeave(System.UInt16)">
            <summary>
                Handles a server leaving this group.
            </summary>
            <param name="id">The ID of the server leaving.</param>
        </member>
        <member name="T:DarkRift.Server.INetworkListenerManager">
            <summary>
                Interface for the listener manager that handles network listeners.
            </summary>
        </member>
        <member name="P:DarkRift.Server.INetworkListenerManager.Item(System.String)">
            <summary>
                Gets the listener with the specified name.
            </summary>
            <param name="name">The name of the listener.</param>
            <returns>The listener.</returns>
            <remarks>
                O(1) complexity.
                This cannot be called during server initialization as not all plugins may 
                have been loaded at that point, consider using the 
                <see cref="M:DarkRift.Server.ExtendedPluginBase.Loaded(DarkRift.Server.LoadedEventArgs)"/> event instead.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.INetworkListenerManager.GetNetworkListeners">
            <summary>
                Gets the listeners loaded into this server.
            </summary>
            <returns>An array of the listeners.</returns>
        </member>
        <member name="M:DarkRift.Server.INetworkListenerManager.GetAllNetworkListeners">
            <summary>
                Gets all the listeners loaded into this server.
            </summary>
            <returns>An array of the listeners.</returns>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.INetworkListenerManager.GetNetworkListenerByName(System.String)">
            <summary>
                Gets the listener with the specified name.
            </summary>
            <param name="name">The name of the listener.</param>
            <returns>The listener.</returns>
            <remarks>
                O(1) complexity.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.INetworkListenerManager.GetNetworkListenersByType``1">
            <summary>
                Gets the listeners of the given type.
            </summary>
            <typeparam name="T">The type of the listener to load.</typeparam>
            <returns>The listeners.</returns>
            <remarks>
                O(n) complexity.
            </remarks>
        </member>
        <member name="T:DarkRift.Server.InstallEventArgs">
            <summary>
                Event arguments for when a plugin has been installed.
            </summary>
        </member>
        <member name="T:DarkRift.Server.IPluginManager">
            <summary>
                Interface for the plugin manager that handles plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IPluginManager.Item(System.String)">
            <summary>
                Gets the plugin with the specified name.
            </summary>
            <param name="name">The name of the plugin.</param>
            <returns>The plugin.</returns>
            <remarks>
                O(1) complexity.
                This cannot be called during server initialization as not all plugins may 
                have been loaded at that point, consider using the 
                <see cref="M:DarkRift.Server.ExtendedPluginBase.Loaded(DarkRift.Server.LoadedEventArgs)"/> event instead.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.IPluginManager.ActuallyGetAllPlugins">
            <summary>
                Gets all the plugins loaded into this server including internal ones.
            </summary>
            <returns>An array of the plugins.</returns>
            <remarks>
                Pro only.
                
                This cannot be called during server initialization as not all plugins may 
                have been loaded at that point, consider using the 
                <see cref="M:DarkRift.Server.ExtendedPluginBase.Loaded(DarkRift.Server.LoadedEventArgs)"/> event instead.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.IPluginManager.GetAllPlugins">
             <summary>
                 Gets all the plugins loaded into this server.
             </summary>
             <returns>An array of the plugins.</returns>
             <remarks>
                 Pro only.
            
                 This cannot be called during server initialization as not all plugins may 
                 have been loaded at that point, consider using the 
                 <see cref="M:DarkRift.Server.ExtendedPluginBase.Loaded(DarkRift.Server.LoadedEventArgs)"/> event instead.
             </remarks>
        </member>
        <member name="M:DarkRift.Server.IPluginManager.GetInstalledVersion(System.String)">
            <summary>
                Retrieves the current version of a plugin installed.
            </summary>
            <param name="pluginName">The name of the plugin to look up.</param>
            <returns>The version of the plugin or null if not installed.</returns>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.IPluginManager.GetPluginByName(System.String)">
            <summary>
                Gets the plugin with the specified name.
            </summary>
            <param name="name">The name of the plugin.</param>
            <returns>The plugin.</returns>
            <remarks>
                O(1) complexity.
                
                This cannot be called during server initialization as not all plugins may 
                have been loaded at that point, consider using the 
                <see cref="M:DarkRift.Server.ExtendedPluginBase.Loaded(DarkRift.Server.LoadedEventArgs)"/> event instead.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.IPluginManager.GetPluginByType``1">
            <summary>
                Gets the plugin of the given type.
            </summary>
            <typeparam name="T">The type of the plugin to load.</typeparam>
            <returns>The plugin.</returns>
            <remarks>
                O(n) complexity.
                
                This cannot be called during server initialization as not all plugins may 
                have been loaded at that point, consider using the 
                <see cref="M:DarkRift.Server.ExtendedPluginBase.Loaded(DarkRift.Server.LoadedEventArgs)"/> event instead.
            </remarks>
        </member>
        <member name="T:DarkRift.Server.IRemoteServer">
            <summary>
                Represents another server in the cluster.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IRemoteServer.ConnectionState">
            <summary>
                The state of the connection.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IRemoteServer.ServerGroup">
            <summary>
                The group this connection belongs to.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IRemoteServer.ServerConnectionDirection">
            <summary>
                The direction of this server connection.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IRemoteServer.ID">
            <summary>
                The ID of the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IRemoteServer.Host">
            <summary>
                The host connected to.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IRemoteServer.Port">
            <summary>
                The port connected to.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IRemoteServer.RemoteEndPoints">
            <summary>
                The endpoints of the connection.
            </summary>
        </member>
        <member name="E:DarkRift.Server.IRemoteServer.MessageReceived">
            <summary>
                Event fired when a message is received.
            </summary>
        </member>
        <member name="E:DarkRift.Server.IRemoteServer.ServerConnected">
            <summary>
                Event fired when the server connects.
            </summary>
        </member>
        <member name="E:DarkRift.Server.IRemoteServer.ServerDisconnected">
            <summary>
                Event fired when the server disconnects.
            </summary>
        </member>
        <member name="M:DarkRift.Server.IRemoteServer.GetRemoteEndPoint(System.String)">
            <summary>
                Returns the named endpoint on the remote server.
            </summary>
            <param name="name">The name of the endpoint.</param>
            <returns>The endpoint.</returns>
        </member>
        <member name="M:DarkRift.Server.IRemoteServer.SendMessage(DarkRift.Message,DarkRift.SendMode)">
            <summary>
                Sends a message to the remote server.
            </summary>
            <param name="message">The message to send.</param>
            <param name="sendMode">The send mode to send the message with.</param>
            <returns>Whether the message was able to be sent.</returns>
        </member>
        <member name="T:DarkRift.Server.IRemoteServerManager">
            <summary>
                Manages the connections to other server groups.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IRemoteServerManager.ServerID">
            <summary>
                The ID of the server in the cluster.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IRemoteServerManager.Group">
            <summary>
                The group the server is in.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IRemoteServerManager.Visibility">
            <summary>
                The visibility of the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IRemoteServerManager.Item(System.String)">
            <summary>
                Returns a server group by name.
            </summary>
            <param name="name">The name of the server group.</param>
            <returns>The server group.</returns>
        </member>
        <member name="M:DarkRift.Server.IRemoteServerManager.GetAllGroups">
            <summary>
                Returns all server groups.
            </summary>
            <returns>An array of all server groups.</returns>
        </member>
        <member name="M:DarkRift.Server.IRemoteServerManager.GetGroup(System.String)">
            <summary>
                Returns a server group by name.
            </summary>
            <param name="name">The name of the server group.</param>
            <returns>The server group.</returns>
        </member>
        <member name="M:DarkRift.Server.IRemoteServerManager.FindServer(System.UInt16)">
            <summary>
                Find the server with the given ID, if connected to it.
            </summary>
            <param name="id">The ID to find</param>
            <returns>The server found.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If this server is not connected to the specified server.</exception>
        </member>
        <member name="T:DarkRift.Server.IServerGroup">
            <summary>
                Represents a group of servers in the cluster.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IServerGroup.Item(System.UInt16)">
            <summary>
                Gets a server by the server's ID.
            </summary>
            <param name="id">The ID of the server.</param>
            <returns>The server with that ID.</returns>
        </member>
        <member name="E:DarkRift.Server.IServerGroup.ServerJoined">
            <summary>
                Event fired when a server joins.
            </summary>
        </member>
        <member name="E:DarkRift.Server.IServerGroup.ServerLeft">
            <summary>
                Event fired when a server leaves the group.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IServerGroup.Count">
            <summary>
                The number of servers currently in this group.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IServerGroup.Name">
            <summary>
                The name of this server group.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IServerGroup.Visibility">
            <summary>
                The visibility of the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IServerGroup.Direction">
            <summary>
                The connection direction to this group.
            </summary>
        </member>
        <member name="M:DarkRift.Server.IServerGroup.GetAllRemoteServers">
            <summary>
                Returns all remote servers in this group.
            </summary>
            <returns>The remote servers in this group.</returns>
        </member>
        <member name="M:DarkRift.Server.IServerGroup.GetRemoteServer(System.UInt16)">
            <summary>
                Returns a specific remote server in this group by ID.
            </summary>
            <param name="id">The Id of the server.</param>
            <returns>The remote server.</returns>
        </member>
        <member name="T:DarkRift.Server.IServerRegistryConnectorManager">
            <summary>
                Manager for the server registry connectors.
            </summary>
        </member>
        <member name="P:DarkRift.Server.IServerRegistryConnectorManager.ServerRegistryConnector">
            <summary>
                The server registry connector.
            </summary>
        </member>
        <member name="T:DarkRift.Server.LoadedEventArgs">
            <summary>
                Event arguments for when plugins have loaded.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Logger">
            <summary>
                Encapsulates logging for a component.
            </summary>
            <see cref="M:DarkRift.Server.ILogManager.GetLoggerFor(System.String)"/>
        </member>
        <member name="P:DarkRift.Server.Logger.Name">
            <summary>
                The name of the component the logger is logging for.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Logger.logManager">
            <summary>
                The log manager to send logs to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Logger.#ctor(System.String,DarkRift.Server.LogManager)">
            <summary>
                Creates a new logger with the given name.
            </summary>
            <param name="name">The name of the component logging for.</param>
            <param name="logManager">The log manager to send logs to.</param>
        </member>
        <member name="M:DarkRift.Server.Logger.Log(System.String,DarkRift.LogType,System.Exception)">
            <summary>
                Writes an event to the logs.
            </summary>
            <param name="message">The details of the event.</param>
            <param name="logType">The type of event that occurred.</param>
            <param name="exception">The exception that caused this log.</param>
        </member>
        <member name="M:DarkRift.Server.Logger.Trace(System.String,System.Exception)">
            <summary>
                Writes a trace event to the logs.
            </summary>
            <param name="message">The details of the event.</param>
            <param name="exception">The exception that caused this log.</param>
        </member>
        <member name="M:DarkRift.Server.Logger.Info(System.String,System.Exception)">
            <summary>
                Writes an info event to the logs.
            </summary>
            <param name="message">The details of the event.</param>
            <param name="exception">The exception that caused this log.</param>
        </member>
        <member name="M:DarkRift.Server.Logger.Warning(System.String,System.Exception)">
            <summary>
                Writes a warning event to the logs.
            </summary>
            <param name="message">The details of the event.</param>
            <param name="exception">The exception that caused this log.</param>
        </member>
        <member name="M:DarkRift.Server.Logger.Error(System.String,System.Exception)">
            <summary>
                Writes an error event to the logs.
            </summary>
            <param name="message">The details of the event.</param>
            <param name="exception">The exception that caused this log.</param>
        </member>
        <member name="M:DarkRift.Server.Logger.Fatal(System.String,System.Exception)">
            <summary>
                Writes a fatal event to the logs.
            </summary>
            <param name="message">The details of the event.</param>
            <param name="exception">The exception that caused this log.</param>
        </member>
        <member name="F:DarkRift.Server.LogManager.logWriters">
            <summary>
                The log writers to use for messages.
            </summary>
        </member>
        <member name="F:DarkRift.Server.LogManager.writerMatrix">
            <summary>
                The matrix of writers for logging at the right level.
            </summary>
        </member>
        <member name="F:DarkRift.Server.LogManager.server">
            <summary>
                The server this belongs to.
            </summary>
        </member>
        <member name="T:DarkRift.Server.LogManager.DefaultWriter">
            <summary>
                Default writer for logs before log wrtiers have been setup.
            </summary>
        </member>
        <member name="M:DarkRift.Server.LogManager.#ctor(DarkRift.Server.DarkRiftServer,DarkRift.Server.ServerSpawnData.LoggingSettings)">
            <summary>
                Creates a new log manager.
            </summary>
            <param name="server">The server we belong to.</param>
            <param name="settings">The settings to load writers from.</param>
        </member>
        <member name="M:DarkRift.Server.LogManager.LoadWriters(DarkRift.Server.ServerSpawnData.LoggingSettings,DarkRift.Server.PluginFactory)">
            <summary>
                Loads the writers found by the plugin factory.
            </summary>
            <param name="settings">The settings to load writers from.</param>
            <param name="pluginFactory">The server's plugin factory.</param>
        </member>
        <member name="M:DarkRift.Server.LogManager.Clear">
            <summary>
                Clears all writers.
            </summary>
        </member>
        <member name="M:DarkRift.Server.LogManager.WriteEvent(System.String,System.String,DarkRift.LogType,System.Exception)">
            <summary>
                Writes an event to the logs.
            </summary>
            <param name="sender">The object that's reporting this event.</param>
            <param name="message">The details of the event.</param>
            <param name="logType">The type of event that occurred.</param>
            <param name="exception">The exception that caused this log.</param>
        </member>
        <member name="M:DarkRift.Server.LogManager.GetLogWriterByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.LogManager.GetLogWriterByType``1">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.LogManager.GetLogWritersByType``1">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.LogManager.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.LogManager.GetLoggerFor(System.String)">
            <inheitdoc />
        </member>
        <member name="T:DarkRift.Server.LogWriter">
            <summary>
                Base class for all log writers.
            </summary>
        </member>
        <member name="M:DarkRift.Server.LogWriter.#ctor(DarkRift.Server.PluginLoadData)">
            <summary>
                Creates a new LogWriter.
            </summary>
            <param name="pluginLoadData">The data to start the log writer with.</param>
            <remarks>
                This constructor is now obsolete and should not be used where possible as it carries
                additional, irrelevant server components. Instead, now log writers should define a 
                constructor that uses the LogWriterLoadData which should be a drop in replacement and 
                should also provide for better unit testing.
                
                <code>
                    <![CDATA[public MyLogWriter(LogWriterLoadData logWriterLoadData)
                : base(logWriterLoadData)
            {
                
            }]]>
                </code>
            </remarks>
        </member>
        <member name="M:DarkRift.Server.LogWriter.#ctor(DarkRift.Server.LogWriterLoadData)">
            <summary>
                Creates a new LogWriter.
            </summary>
            <param name="logWriterLoadData">The data to start the log writer with.</param>
        </member>
        <member name="M:DarkRift.Server.LogWriter.WriteEvent(DarkRift.Server.WriteEventArgs)">
            <summary>
                Writes an event to this log writer.
            </summary>
            <param name="args">The message to log.</param>
        </member>
        <member name="T:DarkRift.Server.LogWriterLoadData">
            <summary>
                Load data for <see cref="T:DarkRift.Server.LogWriter"/> plugins.
            </summary>
        </member>
        <member name="M:DarkRift.Server.LogWriterLoadData.#ctor(System.String,System.Collections.Specialized.NameValueCollection,DarkRift.Server.DarkRiftInfo,DarkRift.Server.DarkRiftThreadHelper)">
            <summary>
                Creates new load data for a <see cref="T:DarkRift.Server.LogWriter"/>.
            </summary>
            <param name="name">The name of the log writer.</param>
            <param name="settings">The settings to pass the log writer.</param>
            <param name="serverInfo">The runtime details about the server.</param>
            <param name="threadHelper">The server's thread helper.</param>
        </member>
        <member name="T:DarkRift.Server.MessageReceivedEventArgs">
            <summary>
                Arguments for the <see cref="E:DarkRift.Server.IMessageSinkSource.MessageReceived"/> event.
            </summary>
        </member>
        <member name="P:DarkRift.Server.MessageReceivedEventArgs.SendMode">
            <summary>
                The method the data was sent using.
            </summary>
        </member>
        <member name="P:DarkRift.Server.MessageReceivedEventArgs.Client">
            <summary>
                The client the message was received from.
            </summary>
        </member>
        <member name="P:DarkRift.Server.MessageReceivedEventArgs.Tag">
            <summary>
                The tag the message was sent with.
            </summary>
        </member>
        <member name="F:DarkRift.Server.MessageReceivedEventArgs.message">
            <summary>
                The message received.
            </summary>
        </member>
        <member name="F:DarkRift.Server.MessageReceivedEventArgs.isCurrentlyLoungingInAPool">
            <summary>
                Whether this args object is currently in an object pool waiting or not.
            </summary>
        </member>
        <member name="M:DarkRift.Server.MessageReceivedEventArgs.Create(DarkRift.Message,DarkRift.SendMode,DarkRift.Server.IClient)">
            <summary>
                Creates a new args object for the <see cref="E:DarkRift.Server.IMessageSinkSource.MessageReceived"/> event.
            </summary>
            <param name="message">The message received.</param>
            <param name="sendMode">The send mode the message was received with.</param>
            <param name="client">The client the message was received from.</param>
        </member>
        <member name="M:DarkRift.Server.MessageReceivedEventArgs.#ctor">
            <summary>
                Creates a new MessageReceivedEventArgs. For use from the ObjectCache.
            </summary>
        </member>
        <member name="M:DarkRift.Server.MessageReceivedEventArgs.GetMessage">
            <summary>
                Gets the message received.
            </summary>
            <returns>An new instance of the message received.</returns>
        </member>
        <member name="M:DarkRift.Server.MessageReceivedEventArgs.Dispose">
            <summary>
                Recycles this object back into the pool.
            </summary>
        </member>
        <member name="M:DarkRift.Server.MessageReceivedEventArgs.Finalize">
            <summary>
                Finalizer so we can inform the cache system we were not recycled correctly.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Metrics.ICounterMetric">
            <summary>
            A metric capable only of increasing in value.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Metrics.ICounterMetric.Increment">
            <summary>
            Increase the value of the counter by 1.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Metrics.ICounterMetric.Increment(System.Double)">
            <summary>
            Increase the value of the counter by a specified amount.
            </summary>
            <param name="value">The amount to increase the counter by.</param>
        </member>
        <member name="T:DarkRift.Server.Metrics.IGaugeMetric">
            <summary>
            A metric representing the current value of a property, able to increase or decrease.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Metrics.IGaugeMetric.Report(System.Double)">
            <summary>
            Set the value of this gauge to that specified.
            </summary>
            <param name="value">The value of the gauge to set.</param>
        </member>
        <member name="T:DarkRift.Server.Metrics.IHistogramMetric">
            <summary>
            A metric measuring a statistical disribution of values.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Metrics.IHistogramMetric.Report(System.Double)">
            <summary>
            Adds the value to the histogram.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="T:DarkRift.Server.Metrics.IMetricsManager">
            <summary>
            An object that manages the server's metrics writers.
            </summary>
            <remarks>
            Pro only
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Metrics.IMetricsManager.MetricsWriter">
            <summary>
            The server's metrics writer.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Metrics.IMetricsManager.GetMetricsCollectorFor(System.String)">
            <summary>
            Returns a metrics collector for the given component.
            </summary>
            <param name="name">The name of the component to create metrics for.</param>
            <returns>The created <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/></returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.IMetricsManager.GetNoOpMetricsCollectorFor(System.String)">
            <summary>
            Returns a no-op metrics collector for the given component that will not record metrics.
            </summary>
            <param name="name">The name of the component to create metrics for.</param>
            <returns>The created <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/></returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.IMetricsManager.GetPerMessageMetricsCollectorFor(System.String)">
            <summary>
            Returns a metrics collector for a component that will log metrics every message.
            </summary>
            <param name="name">The name of the component to create metrics for.</param>
            <returns>The created <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/></returns>
            <remarks>
            The metrics collector returned will be a no-op metrics collector unless per message metrics are
            enabled in the server's metrics settings.
            </remarks>
        </member>
        <member name="T:DarkRift.Server.Metrics.MetricsCollector">
            <summary>
            Provides an interface for reporting basic metrics.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Metrics.MetricsCollector.Prefix">
            <summary>
            The prefix to add to metrics created from this <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/>.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Metrics.MetricsCollector.Writer">
            <summary>
            The <see cref="T:DarkRift.Server.Metrics.MetricsWriter"/> this collector is sending metrics to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsCollector.Counter(System.String,System.String)">
            <summary>
            Creates a new counter metric.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <returns>The created counter.</returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsCollector.Counter(System.String,System.String,System.String[])">
            <summary>
            Creates a new counter metric with tags.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <param name="tags">The tag keys the metric will use.</param>
            <returns>The created counter.</returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsCollector.Gauge(System.String,System.String)">
            <summary>
            Creates a new gauge metric.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <returns>The created gauge.</returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsCollector.Gauge(System.String,System.String,System.String[])">
            <summary>
            Creates a new gauge metric with tags.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <param name="tags">The tag keys the metric will use.</param>
            <returns>The created gauge.</returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsCollector.Histogram(System.String,System.String)">
            <summary>
            Creates a new histogram metric.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <returns>The created histogram.</returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsCollector.Histogram(System.String,System.String,System.String[])">
            <summary>
            Creates a new histogram metric.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <param name="tags">The tag keys the metric will use.</param>
            <returns>The created histogram.</returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsCollector.ValidateName(System.String)">
            <summary>
            Validate the given name.
            </summary>
            <param name="name">The name to validate.</param>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsCollector.ValidateTags(System.String[])">
            <summary>
            Validate the given tags.
            </summary>
            <param name="tags">The tags to validate.</param>
        </member>
        <member name="P:DarkRift.Server.Metrics.MetricsManager.MetricsWriter">
            <summary>
                The metric writer in use.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Metrics.MetricsManager.EnablePerMessageMetrics">
            <summary>
                Whether to enable metrics that get emitted per message.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Metrics.MetricsManager.server">
            <summary>
                The server this belongs to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsManager.#ctor(DarkRift.Server.DarkRiftServer,DarkRift.Server.ServerSpawnData.MetricsSettings)">
            <summary>
                Creates a new metrics manager.
            </summary>
            <param name="server">The server we belong to.</param>
            <param name="settings">The settings to load from.</param>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsManager.LoadWriters(DarkRift.Server.ServerSpawnData.MetricsSettings,DarkRift.Server.PluginFactory,DarkRift.Server.LogManager)">
            <summary>
                Loads the writers found by the plugin factory.
            </summary>
            <param name="settings">The settings to load the writer from.</param>
            <param name="pluginFactory">The server's plugin factory.</param>
            <param name="logManager">The server's log manager.</param>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsManager.GetMetricsCollectorFor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsManager.GetNoOpMetricsCollectorFor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsManager.GetPerMessageMetricsCollectorFor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:DarkRift.Server.Metrics.MetricsWriter">
            <summary>
            Base class for plugins that handle writing out metrics.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsWriter.#ctor(DarkRift.Server.Metrics.MetricsWriterLoadData)">
            <summary>
                Creates a new MetricsWriter.
            </summary>
            <param name="metricsWriterLoadData">The data to start the metrics writer with.</param>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsWriter.CreateCounter(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String)">
            <summary>
            Creates an <see cref="T:DarkRift.Server.Metrics.ICounterMetric"/> that writes to this writer.
            </summary>
            <param name="metricsCollector">The <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/> used to create the metric.</param>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <returns>The created <see cref="T:DarkRift.Server.Metrics.ICounterMetric"/>.</returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsWriter.CreateCounter(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String,System.String[])">
            <summary>
            Creates a builder for an <see cref="T:DarkRift.Server.Metrics.ICounterMetric"/> that writes to this writer.
            </summary>
            <param name="metricsCollector">The <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/> used to create the metric.</param>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <param name="tags">The set of tags describing this metric as colon separated pairs.</param>
            <returns>The created <see cref="T:DarkRift.Server.Metrics.ICounterMetric"/>.</returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsWriter.CreateGauge(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String)">
            <summary>
            Creates an <see cref="T:DarkRift.Server.Metrics.IGaugeMetric"/> that writes to this writer.
            </summary>
            <param name="metricsCollector">The <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/> used to create the metric.</param>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <returns>The created <see cref="T:DarkRift.Server.Metrics.IGaugeMetric"/>.</returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsWriter.CreateGauge(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String,System.String[])">
            <summary>
            Creates a builder for an <see cref="T:DarkRift.Server.Metrics.IGaugeMetric"/> that writes to this writer.
            </summary>
            <param name="metricsCollector">The <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/> used to create the metric.</param>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <param name="tags">The set of tags describing this metric as colon separated pairs.</param>
            <returns>The created <see cref="T:DarkRift.Server.Metrics.IGaugeMetric"/>.</returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsWriter.CreateHistogram(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String)">
            <summary>
            Creates an <see cref="T:DarkRift.Server.Metrics.IHistogramMetric"/> that writes to this writer.
            </summary>
            <param name="metricsCollector">The <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/> used to create the metric.</param>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <returns>The created <see cref="T:DarkRift.Server.Metrics.IHistogramMetric"/>.</returns>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsWriter.CreateHistogram(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String,System.String[])">
            <summary>
            Creates a builder for an <see cref="T:DarkRift.Server.Metrics.IHistogramMetric"/> that writes to this writer.
            </summary>
            <param name="metricsCollector">The <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/> used to create the metric.</param>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <param name="tags">The set of tags describing this metric as colon separated pairs.</param>
            <returns>The created <see cref="T:DarkRift.Server.Metrics.IHistogramMetric"/>.</returns>
        </member>
        <member name="T:DarkRift.Server.Metrics.MetricsWriterLoadData">
            <summary>
                Load data for <see cref="T:DarkRift.Server.Metrics.MetricsWriter"/> plugins.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Metrics.MetricsWriterLoadData.#ctor(System.String,System.Collections.Specialized.NameValueCollection,DarkRift.Server.DarkRiftInfo,DarkRift.Server.DarkRiftThreadHelper)">
            <summary>
                Creates new load data for a <see cref="T:DarkRift.Server.Metrics.MetricsWriter"/>.
            </summary>
            <param name="name">The name of the metrics writer.</param>
            <param name="settings">The settings to pass the metrics writer.</param>
            <param name="serverInfo">The runtime details about the server.</param>
            <param name="threadHelper">The server's thread helper.</param>
        </member>
        <member name="T:DarkRift.Server.Metrics.NoOpCounterMetric">
            <summary>
            Implementation of <see cref="T:DarkRift.Server.Metrics.ICounterMetric"/> that does nothing.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="T:DarkRift.Server.Metrics.NoOpGaugeMetric">
            <summary>
            Implementation of <see cref="T:DarkRift.Server.Metrics.IGaugeMetric"/> that does nothing.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="T:DarkRift.Server.Metrics.NoOpHistogramMetric">
            <summary>
            Implementation of <see cref="T:DarkRift.Server.Metrics.IHistogramMetric"/> that does nothing.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="T:DarkRift.Server.Metrics.TaggedMetricBuilder`1">
            <summary>
            Builder for tagged metrics.
            </summary>
            <typeparam name="T">The type of metric being produced.</typeparam>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="F:DarkRift.Server.Metrics.TaggedMetricBuilder`1.noTagsExpected">
            <summary>
            The number of tags expected to be provided.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Metrics.TaggedMetricBuilder`1.producer">
            <summary>
            A function that will produce a metric from the given tags.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Metrics.TaggedMetricBuilder`1.#ctor(System.Int32,System.Func{System.String[],`0})">
            <summary>
            Creates a new TaggedMetricBuilder.
            </summary>
            <param name="noTagsExpected">The number of tags expected to be provided.</param>
            <param name="producer">A function that will produce a metric from the given values.</param>
        </member>
        <member name="M:DarkRift.Server.Metrics.TaggedMetricBuilder`1.WithTags(System.String[])">
            <summary>
            Creates a metric with the given tag values.
            </summary>
            <param name="values">The values of the tags to set.</param>
            <returns>The created metric.</returns>
            <exception cref="T:System.ArgumentException">The the number of values does not match the number the metric was created with.</exception>
            <remarks>
            The number of values passed in here must match the number of arguments the metric was initialized
            with else an <see cref="T:System.ArgumentException"/> will be thrown.
            </remarks>
        </member>
        <member name="T:DarkRift.Server.NetworkListener">
            <summary>
                Base class for all plugins providing network functionality.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkListener.Address">
            <summary>
                The address this listener is operating on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkListener.Port">
            <summary>
                The port this listener is operating on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkListener.MetricsManager">
            <summary>
            The server's metrics manager.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.NetworkListener.MetricsCollector">
            <summary>
                Metrics collector for the plugin.
            </summary>
            <remarks>
                Pro only.
            </remarks>
        </member>
        <member name="E:DarkRift.Server.NetworkListener.RegisteredConnection">
            <summary>
                Event fired when a new connection is registered.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.#ctor(DarkRift.Server.NetworkListenerLoadData)">
            <summary>
                Constructor for a network listener.
            </summary>
            <param name="pluginLoadData">The load data for the listener plugin.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.WriteEvent(System.String,DarkRift.LogType,System.Exception)">
            <summary>
                Writes an event to the server's logs.
            </summary>
            <param name="message">The message to write.</param>
            <param name="logType">The type of message to write.</param>
            <param name="exception">The exception that occurred (if there was one).</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.RegisterConnection(DarkRift.Server.NetworkServerConnection)">
            <summary>
                Registers a new connection to the server.
            </summary>
            <param name="connection">The new connection.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListener.StartListening">
            <summary>
                Starts the listener listening on the network.
            </summary>
        </member>
        <member name="T:DarkRift.Server.NetworkListenerLoadData">
            <summary>
                Data related to the listener's loading.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkListenerLoadData.NetworkListenerManager">
            <summary>
                The network listener manager to pass to the listener.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkListenerLoadData.Address">
            <summary>
                The address this listener is listening on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkListenerLoadData.Port">
            <summary>
                The port this listener is listening on.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkListenerLoadData.#ctor(System.String,System.Collections.Specialized.NameValueCollection,DarkRift.Server.DarkRiftInfo,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.Logger)">
            <summary>
                Creates new load data for a <see cref="T:DarkRift.Server.NetworkListener"/>.
            </summary>
            <param name="name">The name of the listener.</param>
            <param name="settings">The settings to pass the listener.</param>
            <param name="serverInfo">The runtime details about the server.</param>
            <param name="threadHelper">The server's thread helper.</param>
            <param name="logger">The logger this plugin will use.</param>
            <remarks>
                This constructor ensures that the legacy <see cref="T:DarkRift.Server.WriteEventHandler"/> field is initialised to <see cref="M:DarkRift.Server.Logger.Log(System.String,DarkRift.LogType,System.Exception)"/> for backwards compatibility.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.NetworkListenerLoadData.#ctor(System.String,System.Collections.Specialized.NameValueCollection,DarkRift.Server.DarkRiftInfo,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.WriteEventHandler)">
            <summary>
                Creates new load data for a <see cref="T:DarkRift.Server.NetworkListener"/>.
            </summary>
            <param name="name">The name of the listener.</param>
            <param name="settings">The settings to pass the listener.</param>
            <param name="serverInfo">The runtime details about the server.</param>
            <param name="threadHelper">The server's thread helper.</param>
            <param name="writeEventHandler"><see cref="T:DarkRift.Server.WriteEventHandler"/> for logging.</param>
        </member>
        <member name="T:DarkRift.Server.NetworkListenerManager">
            <summary>
                Manager for all <see cref="T:DarkRift.Server.NetworkListener"/> plugins.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkListenerManager.server">
            <summary>
                The DarkRift server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkListenerManager.logManager">
            <summary>
                The server's log manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.NetworkListenerManager.metricsManager">
            <summary>
                The server's metrics manager.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkListenerManager.#ctor(DarkRift.Server.DarkRiftServer,DarkRift.Server.LogManager,DarkRift.Server.Metrics.MetricsManager,DarkRift.Server.DataManager,DarkRift.Server.PluginFactory)">
            <summary>
                Creates a new NetworkListenerManager.
            </summary>
            <param name="server">The server that owns this plugin manager.</param>
            <param name="logManager">The server's log manager.</param>
            <param name="dataManager">The server's datamanager.</param>
            <param name="pluginFactory">The server's plugin factory.</param>
            <param name="metricsManager">The server's metrics manager.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListenerManager.LoadNetworkListeners(DarkRift.Server.ServerSpawnData.ListenersSettings)">
            <summary>
                Loads the plugins found by the plugin factory.
            </summary>
            <param name="settings">The settings to load plugins with.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListenerManager.LoadNetworkListener(System.Type,System.String,System.Net.IPAddress,System.UInt16,System.Collections.Specialized.NameValueCollection)">
            <summary>
                Load the listener given.
            </summary>
            <param name="type">The plugin type to load.</param>
            <param name="name">The name of the plugins instance.</param>
            <param name="address">The address to listen on.</param>
            <param name="port">The port to listen on.</param>
            <param name="settings">The settings for this plugin.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkListenerManager.StartListening">
            <summary>
                Starts all <see cref="T:DarkRift.Server.NetworkListener">NetworkListeners</see> listening.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkListenerManager.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.NetworkListenerManager.GetNetworkListenerByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.NetworkListenerManager.GetNetworkListenersByType``1">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.NetworkListenerManager.GetNetworkListeners">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.NetworkListenerManager.GetAllNetworkListeners">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.NetworkServerConnection">
            <summary>
                Base class handling a connection to a client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkServerConnection.ConnectionState">
            <summary>
                The state of this connection.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkServerConnection.RemoteEndPoints">
            <summary>
                The collection of end points this connection is connected to.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkServerConnection.MessageReceived">
            <summary>
                The action to call when a message is received.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkServerConnection.Disconnected">
            <summary>
                The action to call when the connection is remotely disconnected.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.GetRemoteEndPoint(System.String)">
            <summary>
                Get's an end point of the remote client.
            </summary>
        </member>
        <member name="P:DarkRift.Server.NetworkServerConnection.Client">
            <summary>
                The client related to this server connection.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.HandleMessageReceived(DarkRift.MessageBuffer,DarkRift.SendMode)">
            <summary>
                Handles a buffer being received. 
            </summary>
            <param name="message">The message received.</param>
            <param name="mode">The <see cref="T:DarkRift.SendMode"/> used to send the data.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.SendMessage(DarkRift.MessageBuffer,DarkRift.SendMode)">
            <summary>
                Sends a message using the appropriate protocol.
            </summary>
            <param name="message">The message to be sent.</param>
            <param name="sendMode">How the message should be sent.</param>
            <returns>Whether the send was successful.</returns>
            <remarks>
                <see cref="T:DarkRift.MessageBuffer"/> is an IDisposable type and therefore once you are done 
                using it you should call <see cref="M:DarkRift.MessageBuffer.Dispose"/> to release resources.
                Not doing this will result in memnory leaks.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.StartListening">
            <summary>
                Begins listening for data.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.SendMessageReliable(DarkRift.MessageBuffer)">
            <summary>
                Sends a message reliably.
            </summary>
            <param name="message">The message to be sent.</param>
            <returns>Whether the send was successful.</returns>
            <remarks>
                <see cref="T:DarkRift.MessageBuffer"/> is an IDisposable type and therefore once you are done 
                using it you should call <see cref="M:DarkRift.MessageBuffer.Dispose"/> to release resources.
                Not doing this will result in memnory leaks.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.SendMessageUnreliable(DarkRift.MessageBuffer)">
            <summary>
                Sends a message unreliably.
            </summary>
            <param name="message">The message to be sent.</param>
            <returns>Whether the send was successful.</returns>
            <remarks>
                <see cref="T:DarkRift.MessageBuffer"/> is an IDisposable type and therefore once you are done 
                using it you should call <see cref="M:DarkRift.MessageBuffer.Dispose"/> to release resources.
                Not doing this will result in memnory leaks.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.Disconnect">
            <summary>
                Disconnects this client from the remote host.
            </summary>
            <returns>Whether the disconnect was successful.</returns>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.HandleDisconnection">
            <summary>
                Handles a disconnection.
            </summary>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.HandleDisconnection(System.Net.Sockets.SocketError)">
            <summary>
                Handles a disconnection.
            </summary>
            <param name="error">The error that describes the cause of disconnection.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.HandleDisconnection(System.Exception)">
            <summary>
                Handles a disconnection.
            </summary>
            <param name="exception">An exception that describes the cause of disconnection.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.Strike(System.String,System.Int32)">
            <summary>
                Applies a strike on the associated client.
            </summary>
            <param name="message">An optional message describing the strike.</param>
            <param name="weight">The number of strikes this accounts for.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.Dispose(System.Boolean)">
            <summary>
                Disposes of the server connection.
            </summary>
            <param name="disposing">Whether the object is bing disposed or not.</param>
        </member>
        <member name="M:DarkRift.Server.NetworkServerConnection.Dispose">
            <summary>
                Disposes of this server connection.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PendingDownstreamRemoteServer.Connection">
            <summary>
                The connection to the remote server.
            </summary>
            <remarks>
                Will change reference on reconnections. Currently this is not marked volatile as that is a very exceptional circumstance and at that point
                was can likely tolerate just waiting for something else to synchronise caches later.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.PendingDownstreamRemoteServer.Ready">
            <summary>
                Delegate invoked if the remote server identifies itself.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PendingDownstreamRemoteServer.Dropped">
            <summary>
                Delegate invoked if the connection is dropped.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PendingDownstreamRemoteServer.queuedMessages">
            <summary>
                Queue of messages accumulated before the server identifed itself and was assigned to the correct remote server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PendingDownstreamRemoteServer.timer">
            <summary>
                Timer used to timeout connections.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PendingDownstreamRemoteServer.logger">
            <summary>
                The logger to use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PendingDownstreamRemoteServer.completed">
            <summary>
                Whether the connection has been identified/dropped yet. Locked on timer.
            </summary>
        </member>
        <member name="T:DarkRift.Server.PendingDownstreamRemoteServer.QueuedMessage">
            <summary>
                Holds a message that received before the connection was assigned to a remote server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PendingDownstreamRemoteServer.QueuedMessage.Message">
            <summary>
                The message received.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PendingDownstreamRemoteServer.QueuedMessage.SendMode">
            <summary>
                The send mode used.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PendingDownstreamRemoteServer.#ctor(DarkRift.Server.NetworkServerConnection,System.Int32,System.Action{DarkRift.Server.PendingDownstreamRemoteServer,System.UInt16},System.Action{DarkRift.Server.PendingDownstreamRemoteServer},DarkRift.Server.Logger)">
            <summary>
                Creates a new remote server.
            </summary>
            <param name="connection">The connection to the server.</param>
            <param name="timeoutMs">The number of milliseconds to wait before timing out.</param>
            <param name="ready">Delegate invoked if the connection is dropped.</param>
            <param name="dropped">Delegate invoked if the remote server identifies itself.</param>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="M:DarkRift.Server.PendingDownstreamRemoteServer.GetQueuedMessages">
            <summary>
            Retreives the messages that have been queued while this server was pending.
            </summary>
            <returns>The queued messages.</returns>
        </member>
        <member name="M:DarkRift.Server.PendingDownstreamRemoteServer.MessageReceivedHandler(DarkRift.MessageBuffer,DarkRift.SendMode)">
            <summary>
                Callback for when data is received.
            </summary>
            <param name="buffer">The data recevied.</param>
            <param name="sendMode">The SendMode used to send the data.</param>
        </member>
        <member name="M:DarkRift.Server.PendingDownstreamRemoteServer.HandleCommand(DarkRift.Message)">
            <summary>
                Handles a command received.
            </summary>
            <param name="message">The message that was received.</param>
        </member>
        <member name="M:DarkRift.Server.PendingDownstreamRemoteServer.HandleIdentification(DarkRift.Message)">
            <summary>
                Handles an identification command message.
            </summary>
            <param name="message">The message received.</param>
        </member>
        <member name="M:DarkRift.Server.PendingDownstreamRemoteServer.DropConnection">
            <summary>
                Disconnects the connection without calling back to the client manager.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PendingDownstreamRemoteServer.Complete">
            <summary>
            Marks this pending connection as no longer pending.
            </summary>
            <returns>True, if it was able to complete.</returns>
        </member>
        <member name="M:DarkRift.Server.PendingDownstreamRemoteServer.Dispose">
            <summary>
                Disposes of the connection.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PendingDownstreamRemoteServer.Dispose(System.Boolean)">
            <summary>
                Handles disposing of the connection.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:DarkRift.Server.Plugin">
            <summary>
                Base class for DarkRift control plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugin.ClientManager">
            <summary>
                The manager for all clients on this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugin.PluginManager">
            <summary>
                The manager for all plugins on this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugin.NetworkListenerManager">
            <summary>
                The manager for all network listeners on this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugin.ServerRegistryConnectorManager">
            <summary>
                The manager for all cluster connectors on this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugin.RemoteServerManager">
            <summary>
                The server manager for remote servers.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugin.ResourceDirectory">
            <summary>
                The location of this plugins resource store.
            </summary>
            <remarks>
                The resource directory can be used to store any external resources your plugin requires such as web 
                files etc. It will be removed when uninstalling your plugin so you should not store any files elsewhere.
                
                This location may not exist if called from the constructor, use the <see cref="M:DarkRift.Server.ExtendedPluginBase.Loaded(DarkRift.Server.LoadedEventArgs)"/> event instead.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Plugin.BadWordFilter">
            <summary>
                Helper plugin for filtering bad words out of text.
            </summary>
            <remarks>
                <c>Pro only.</c> 
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Plugin.#ctor(DarkRift.Server.PluginLoadData)">
            <summary>
                Creates a new plugin using the given plugin load data.
            </summary>
            <param name="pluginLoadData">The plugin load data for this plugin.</param>
        </member>
        <member name="T:DarkRift.Server.PluginBase">
            <summary>
                Base class for all DarkRift plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.Name">
            <summary>
                The name assigned to this plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.Version">
            <summary>
                The version of this plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.Hidden">
            <summary>
                Should this plugin be hidden from output?
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.DatabaseManager">
            <summary>
                The database manager for the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.Dispatcher">
            <summary>
                The dispatcher for this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.ServerInfo">
            <summary>
                Information about this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.ThreadHelper">
            <summary>
                The thread helper for the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.LogManager">
            <summary>
                The server's log manager.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBase.Logger">
            <summary>
                Default logger for the plugin.
            </summary>
            <seealso cref="M:DarkRift.Server.ILogManager.GetLoggerFor(System.String)"/>
        </member>
        <member name="P:DarkRift.Server.PluginBase.Server">
            <summary>
                The DarkRift server we belong to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginBase.#ctor(DarkRift.Server.PluginBaseLoadData)">
            <summary>
                Creates a new plugin base using the given plugin load data.
            </summary>
            <param name="pluginLoadData"></param>
        </member>
        <member name="M:DarkRift.Server.PluginBase.CreateOneShotTimer(System.Int32,System.Action{DarkRift.Server.Timer})">
            <summary>
                Creates a new timer that will invoke the callback a single time.
            </summary>
            <param name="delay">The delay in milliseconds before invoking the callback.</param>
            <param name="callback">The callback to invoke.</param>
            <returns>The new timer.</returns>
        </member>
        <member name="M:DarkRift.Server.PluginBase.CreateTimer(System.Int32,System.Int32,System.Action{DarkRift.Server.Timer})">
            <summary>
                Creates a new timer that will invoke the callback repeatedly until stopped.
            </summary>
            <param name="initialDelay">The delay in milliseconds before invoking the callback the first time.</param>
            <param name="repetitionPeriod">The delay in milliseconds between future invocations.</param>
            <param name="callback">The callback to invoke.</param>
            <returns>The new timer.</returns>
        </member>
        <member name="M:DarkRift.Server.PluginBase.Dispose(System.Boolean)">
            <summary>
                Handles disposing of the plugin.
            </summary>
            <param name="disposing">If the plugin is disposing.</param>
        </member>
        <member name="M:DarkRift.Server.PluginBase.Dispose">
            <summary>
                Disposes of the plugin.
            </summary>
        </member>
        <member name="T:DarkRift.Server.PluginBaseLoadData">
            <summary>
                Base class for plugin load data.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBaseLoadData.Name">
            <summary>
                The name to give the plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBaseLoadData.DatabaseManager">
            <summary>
                The database manager to pass to the plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBaseLoadData.Dispatcher">
            <summary>
                The dispatcher to pass to the plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBaseLoadData.ServerInfo">
            <summary>
                The server info to pass to the plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBaseLoadData.Settings">
            <summary>
                The settings this plugin was given.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBaseLoadData.ThreadHelper">
            <summary>
                The thread helper for the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBaseLoadData.LogManager">
            <summary>
                The server's log manager.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBaseLoadData.Logger">
            <summary>
                The logger this plugin will use.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginBaseLoadData.Server">
            <summary>
                The server we belong to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginBaseLoadData.#ctor(System.String,System.Collections.Specialized.NameValueCollection,DarkRift.Server.DarkRiftInfo,DarkRift.Server.DarkRiftThreadHelper)">
            <summary>
                Creates new load data with the given properties.
            </summary>
            <param name="name">The name of the plugin.</param>
            <param name="settings">The settings to pass the plugin.</param>
            <param name="serverInfo">The runtime details about the server.</param>
            <param name="threadHelper">The server's thread helper.</param>
        </member>
        <member name="T:DarkRift.Server.PluginFactory">
            <summary>
                Factory for creating plugins of various types.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginFactory.types">
            <summary>
                The list of types that can be loaded.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginFactory.logger">
            <summary>
                The logger this factory will use.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.#ctor(DarkRift.Server.Logger)">
            <summary>
                Creates a new PluginFactory.
            </summary>
            <param name="logger">The logger this factory will use.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.AddFromSettings(DarkRift.Server.ServerSpawnData.PluginSearchSettings)">
            <summary>
                Adds plugins based on the plugins settings supplied.
            </summary>
            <param name="settings">The settings defining where to find plugins.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.AddDirectory(System.String,System.Boolean,DarkRift.Server.DependencyResolutionStrategy)">
            <summary>
                Adds a directory of plugin files to the index.
            </summary>
            <param name="directory">The directory to add.</param>
            <param name="create">Whether to create the directory if not present.</param>
            <param name="dependencyResolutionStrategy">The way to resolve dependencies for the plugin.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.AddFiles(System.Collections.Generic.IEnumerable{System.String},DarkRift.Server.DependencyResolutionStrategy,System.String)">
            <summary>
                Adds the given plugin files into the index.
            </summary>
            <param name="files">An array of filepaths to the plugins.</param>
            <param name="dependencyResolutionStrategy">The way to resolve dependencies for the plugin.</param>
            <param name="searchedDirectory">the directory that was searched to find this file.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.AddTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                Adds plugins into the server from the given types.
            </summary>
            <param name="pluginTypes">The types of plugins to add.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.AddFile(System.String,DarkRift.Server.DependencyResolutionStrategy,System.String)">
            <summary>
                Adds all plugin types in the file to the index.
            </summary>
            <param name="file">The file containing the types.</param>
            <param name="dependencyResolutionStrategy">The way to resolve dependencies for the plugin.</param>
            <param name="searchedDirectory">the directory that was searched to find this file.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.AddType(System.Type)">
            <summary>
                Adds a type to the lookup.
            </summary>
            <param name="plugin">The plugin type to add.</param>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.Create``1(System.String,DarkRift.Server.PluginBaseLoadData,DarkRift.Server.PluginLoadData)">
            <summary>
                Creates a named type as a specified plugin.
            </summary>
            <typeparam name="T">The type of plugin to load it as.</typeparam>
            <param name="type">The name of the type to load.</param>
            <param name="loadData">The data to load into the plugin.</param>
            <param name="backupLoadData">The backup load data to try for backwards compatablity.</param>
            <returns>The new plugin.</returns>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.Create``1(System.Type,DarkRift.Server.PluginBaseLoadData,DarkRift.Server.PluginLoadData)">
            <summary>
                Creates a type as a specified plugin.
            </summary>
            <typeparam name="T">The type of plugin to load it as.</typeparam>
            <param name="type">The type to load.</param>
            <param name="loadData">The data to load into the plugin.</param>
            <param name="backupLoadData">The backup load data to try for backwards compatability.</param>
            <returns>The new plugin.</returns>
        </member>
        <member name="M:DarkRift.Server.PluginFactory.GetAllSubtypes(System.Type)">
            <summary>
                Returns a list of plugins found that are subtypes of that given.
            </summary>
            <param name="type">The type to filter by.</param>
            <returns>The types found.</returns>
        </member>
        <member name="T:DarkRift.Server.PluginLoadData">
            <summary>
                Data related to the plugin's loading.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginLoadData.ClientManager">
            <summary>
                The client manager to pass to the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginLoadData.PluginManager">
            <summary>
                The plugin manager to pass to the plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginLoadData.NetworkListenerManager">
            <summary>
                The network listener manager to pass to the plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginLoadData.ServerRegistryConnectorManager">
            <summary>
                The server regsitry connector manager to pass to the plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginLoadData.RemoteServerManager">
            <summary>
                The server manager to pass to the plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginLoadData.ResourceDirectory">
            <summary>
                The resource directory to pass to the plugin.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginLoadData.#ctor(System.String,System.Collections.Specialized.NameValueCollection,DarkRift.Server.DarkRiftInfo,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.Logger,System.String)">
            <summary>
                Creates new load data with the given properties.
            </summary>
            <param name="name">The name of the plugin.</param>
            <param name="settings">The settings to pass the plugin.</param>
            <param name="serverInfo">The runtime details about the server.</param>
            <param name="threadHelper">The server's thread helper.</param>
            <param name="logger">The logger this plugin will use.</param>
            <param name="resourceDirectory">The directory to place this plugin's resources.</param>
            <remarks>
                This constructor ensures that the legacy <see cref="T:DarkRift.Server.WriteEventHandler"/> field is initialised to <see cref="M:DarkRift.Server.Logger.Log(System.String,DarkRift.LogType,System.Exception)"/> for backwards compatibility.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.PluginLoadData.#ctor(System.String,System.Collections.Specialized.NameValueCollection,DarkRift.Server.DarkRiftInfo,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.WriteEventHandler,System.String)">
            <summary>
                Creates new load data with the given properties.
            </summary>
            <param name="name">The name of the plugin.</param>
            <param name="settings">The settings to pass the plugin.</param>
            <param name="serverInfo">The runtime details about the server.</param>
            <param name="threadHelper">The server's thread helper.</param>
            <param name="writeEventHandler"><see cref="T:DarkRift.Server.WriteEventHandler"/> for logging.</param>
            <param name="resourceDirectory">The directory to place this plugin's resources.</param>
        </member>
        <member name="T:DarkRift.Server.PluginManager">
            <summary>
                The manager of all plugins on the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginManager.server">
            <summary>
                The server that owns this plugin manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginManager.dataManager">
            <summary>
                The server's datamanager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginManager.logManager">
            <summary>
                The server's log manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginManager.metricsManager">
            <summary>
                The server's log manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginManager.pluginFactory">
            <summary>
                The server's plugin factory.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginManager.#ctor(DarkRift.Server.DarkRiftServer,DarkRift.Server.DataManager,DarkRift.Server.LogManager,DarkRift.Server.Metrics.MetricsManager,DarkRift.Server.PluginFactory,DarkRift.Server.Logger)">
            <summary>
                Creates a new PluginManager.
            </summary>
            <param name="server">The server that owns this plugin manager.</param>
            <param name="dataManager">The server's datamanager.</param>
            <param name="logManager">The server's log manager.</param>
            <param name="pluginFactory">The server's plugin factory.</param>
            <param name="logger">The logger for this manager.</param>
            <param name="metricsManager">The server's metrics manager.</param>
        </member>
        <member name="M:DarkRift.Server.PluginManager.LoadPlugins(DarkRift.Server.ServerSpawnData.PluginsSettings)">
            <summary>
                Loads the plugins found by the plugin factory.
            </summary>
            <param name="settings">The settings to load plugins with.</param>
        </member>
        <member name="P:DarkRift.Server.PluginManager.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.PluginManager.GetPluginByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.PluginManager.GetPluginByType``1">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.PluginManager.GetAllPlugins">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.PluginManager.ActuallyGetAllPlugins">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.PluginManagerBase`1">
            <summary>
                Base plugin manager for plugin managers handling <see cref="T:DarkRift.Server.ExtendedPluginBase"/> types.
            </summary>
            <typeparam name="T">The type of plugin being managed.</typeparam>
        </member>
        <member name="F:DarkRift.Server.PluginManagerBase`1.plugins">
            <summary>
                The plugins that have been loaded.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginManagerBase`1.server">
            <summary>
                The DarkRift server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginManagerBase`1.dataManager">
            <summary>
                The server's datamanager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.PluginManagerBase`1.pluginFactory">
            <summary>
                The server's plugin factory.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.#ctor(DarkRift.Server.DarkRiftServer,DarkRift.Server.DataManager,DarkRift.Server.PluginFactory)">
            <summary>
                Creates a new PluginManagerBase.
            </summary>
            <param name="server">The server we are part of.</param>
            <param name="dataManager">The server's data manager.</param>
            <param name="pluginFactory">The server's plugin factory.</param>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.LoadPlugin(System.String,System.Type,DarkRift.Server.PluginBaseLoadData,DarkRift.Server.PluginLoadData,System.Boolean)">
            <summary>
                Load the plugin given.
            </summary>
            <param name="name">The name of the plugin instance.</param>
            <param name="type">The plugin type to load.</param>
            <param name="pluginLoadData">The data for this plugin.</param>
            <param name="backupLoadData">The data for this plugin if the first fails.</param>
            <param name="createResourceDirectory">Whether to create a resource directory or not.</param>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.LoadPlugin(System.String,System.String,DarkRift.Server.PluginBaseLoadData,DarkRift.Server.PluginLoadData,System.Boolean)">
            <summary>
                Load the plugin given.
            </summary>
            <param name="name">The name of the plugin instance.</param>
            <param name="type">The plugin type to load.</param>
            <param name="pluginLoadData">The data for this plugin.</param>
            <param name="backupLoadData">The data for this plugin if the first fails.</param>
            <param name="createResourceDirectory">Whether to create a resource directory or not.</param>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.GetPlugins">
            <summary>
                The plugins loaded.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.GetPlugin(System.String)">
            <summary>
                Gets a plugin by name.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.ContainsPlugin(System.String)">
            <summary>
                Searches for the given plugin name.
            </summary>
            <param name="name">The name of the plugin.</param>
            <returns>Whether the plugins was found.</returns>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.Dispose">
            <summary>
                Disposes of this PluginManager.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginManagerBase`1.Dispose(System.Boolean)">
            <summary>
                Disposes of this PluginManager.
            </summary>
            <param name="disposing">Are we disposing?</param>
        </member>
        <member name="T:DarkRift.Server.PluginRecord">
            <summary>
                A record for persistent storage of plugin data.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginRecord.ID">
            <summary>
                The ID of the record.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginRecord.Name">
            <summary>
                The name of the plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.PluginRecord.Version">
            <summary>
                The version of the plugin currently installed.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginRecord.#ctor(System.UInt32,System.String,System.Version)">
            <summary>
                Creates a new plugin record.
            </summary>
            <param name="id">The ID of the record.</param>
            <param name="name">The name of the plugin.</param>
            <param name="version">The version of the plugin currently installed.</param>
        </member>
        <member name="T:DarkRift.Server.Plugins.Chat.BadWordFilter">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.Chat.BadWordFilter.Version">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.Plugins.Chat.BadWordFilter.Commands">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.Plugins.Chat.BadWordFilter.ThreadSafe">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.Plugins.Chat.BadWordFilter.Hidden">
            <inheritdoc />
        </member>
        <member name="F:DarkRift.Server.Plugins.Chat.BadWordFilter.replacementSymbols">
            <summary>
                Symbols that can be used in the FilterToSymbols method.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Chat.BadWordFilter.listLocation">
            <summary>
                The location of the bad word list on the file system.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Chat.BadWordFilter.url">
            <summary>
                The location of the bad word list to download.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Chat.BadWordFilter.trie">
            <summary>
                The trie for matching bad words.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.BadWordFilter.#ctor(DarkRift.Server.PluginLoadData)">
            <summary>
                Creates a new bad word list plugin.
            </summary>
            <param name="pluginLoadData">The plugin load data from the server.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.BadWordFilter.CommandHandler(System.Object,DarkRift.Server.CommandEventArgs)">
            <summary>
                Handles invocation of the badwordfilter command.
            </summary>
            <param name="sender">The command engine.</param>
            <param name="e">The arguments for the invocation.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.BadWordFilter.UpdateBadWordList(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.BadWordFilter.ContainsBadWords(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.BadWordFilter.FilterToChar(System.String,System.Char)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.BadWordFilter.FilterToSymbols(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.BadWordFilter.FilterToRandomString(System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.BadWordFilter.ReloadBadWordList">
            <summary>
                Reloads the regexes from the bad word list. Use <see cref="M:DarkRift.Server.Plugins.Chat.BadWordFilter.UpdateBadWordList(System.Boolean)"/> to download the latest list.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.BadWordFilter.PopulateBadWords(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                THis
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.BadWordFilter.Search(System.String)">
            <summary>
                Searches for words that are evil.
            </summary>
            <param name="text">The text to search.</param>
            <returns>An iterable of words not allowed.</returns>
        </member>
        <member name="T:DarkRift.Server.Plugins.Chat.IBadWordFilter">
            <summary>
                Helper plugin for filtering bad words out of text. To access an instance use <see cref="P:DarkRift.Server.Plugin.BadWordFilter"/>.
            </summary>
            <remarks>
                <c>Pro only.</c>
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.IBadWordFilter.ContainsBadWords(System.String)">
            <summary>
                Analyzes if the string contains bad words or not.
            </summary>
            <param name="text">The string to analyze.</param>
            <returns>Whether the string contains bad words.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.IBadWordFilter.FilterToChar(System.String,System.Char)">
            <summary>
                Filters a string so that all bad words are replaced with the given char.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="c">The char to replace bad words with.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.IBadWordFilter.FilterToRandomString(System.String,System.String[])">
            <summary>
                Filters a string so that all bad words are replaced with a randomly chosen string.
            </summary>
            <param name="text">The string to filter.</param>
            <param name="replacements">The strings to replace bad words with.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.IBadWordFilter.FilterToSymbols(System.String)">
            <summary>
                Filters a string so that all bad words are replaced with random symbols.
            </summary>
            <param name="text">The string to filter.</param>
            <returns>The filtered string.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.IBadWordFilter.UpdateBadWordList(System.Boolean)">
            <summary>
                Downloads a bad word list from the specifed location.
            </summary>
            <param name="logConfirmation">If true, an Info log will be written on success.</param>
        </member>
        <member name="T:DarkRift.Server.Plugins.Chat.Trie">
            <summary>
            The vanila Trie implementation.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.Trie.#ctor">
            <summary>
            CONSTRUCTOR
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Chat.Trie.Count">
            <summary>
            Return count of words.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Chat.Trie.IsEmpty">
            <summary>
            Checks if element is empty.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.Trie.Add(System.String)">
            <summary>
            Add word to trie
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.Trie.Remove(System.String)">
            <summary>
            Removes a word from the trie.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.Trie.ContainsWord(System.String,System.Int32,System.Int32)">
            <summary>
            Checks whether the trie has a specific word.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.Trie.ContainsPrefix(System.String)">
            <summary>
            Checks whether the trie has a specific prefix.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.Trie.SearchByPrefix(System.String)">
            <summary>
            Searches the entire trie for words that has a specific prefix.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.Trie.Clear">
            <summary>
            Clears this insance.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.Trie.GetEnumerator">
            <summary>
            IEnumerable.IEnumerator implementation.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.Trie.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            IEnumerable.IEnumerator implementation.
            </summary>
            <returns>The enumerator for this instance.</returns>
        </member>
        <member name="T:DarkRift.Server.Plugins.Chat.TrieNode">
            <summary>
            The Trie Node.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Chat.TrieNode.Key">
            <summary>
                The node's key.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Chat.TrieNode.IsTerminal">
            <summary>
                If this trie node is a leaf node.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Chat.TrieNode.Parent">
            <summary>
                The parent node of this trie node.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Chat.TrieNode.Children">
            <summary>
                The child nodes of this trie node.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.TrieNode.#ctor(System.Char)">
            <summary>
                Creates a new non-leaf trie node with no children.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.TrieNode.#ctor(System.Char,System.Boolean)">
            <summary>
                Creates a new trie node with no children.
            </summary>
            <param name="key">This node's key.</param>
            <param name="isTerminal">True, if this node is a leaf node.</param>
        </member>
        <member name="P:DarkRift.Server.Plugins.Chat.TrieNode.Word">
            <summary>
            Return the word at this node if the node is terminal; otherwise, return null
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.TrieNode.GetByPrefix">
            <summary>
            Returns an enumerable list of key-value pairs of all the words that start 
            with the prefix that maps from the root node until this node.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.TrieNode.GetTerminalChildren">
            <summary>
            Returns an enumerable collection of terminal child nodes.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.TrieNode.Remove">
            <summary>
            Remove this element upto its parent.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.TrieNode.CompareTo(DarkRift.Server.Plugins.Chat.TrieNode)">
            <summary>
            IComparer interface implementation
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Chat.TrieNode.Clear">
            <summary>
            Clears this node instance
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.ClearCommand">
            <summary>
                Command to clear the console window.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Commands.ClientCommand.connections">
            <summary>
                The current mock clients.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Commands.ClientCommand.HandleDisconnection(DarkRift.Server.Plugins.Commands.MockedNetworkServerConnection)">
            <summary>
                Handles a mock connection being disconnected.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Commands.ClientCommand.HandleSend(DarkRift.Server.Plugins.Commands.MockedNetworkServerConnection,DarkRift.SendMode,DarkRift.MessageBuffer,System.Boolean)">
            <summary>
                Handles sending to a mock connection.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.DemoCommand">
            <summary>
                Demo command for showing off basic server routing in tutorials.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.HelpCommand">
            <summary>
                Help command!
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.IRule">
            <summary>
                Base interface for sniffer rules.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.MessageCommand">
            <summary>
                Helper plugin for sending messages using commands.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.MockCommand">
            <summary>
                Helper plugin for pretending to receive messages using commands.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Commands.MockedNetworkServerConnection.outputData">
            <summary>
                Whether the data in the message should be output in hex on receive.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Commands.MockedNetworkServerConnection.clientCommand">
            <summary>
                The client command plugin that owns us.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.PluginController">
            <summary>
                Plugin management plugin.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.RuleGroup">
            <summary>
                Group of sniffer rules.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Commands.RuleGroup.OutputData">
            <summary>
                Whether this rull group should show data on log or not.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Commands.Sniffer">
            <summary>
                Packet sniffer plugin.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Commands.Sniffer.rules">
            <summary>
                The rules we are following
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.EntityGroup`1">
            <summary>
                Holds a group of entities.
            </summary>
            <remarks>
                This type is not thread safe.
            </remarks>
            <typeparam name="T">The type of entities to contain.</typeparam>
        </member>
        <member name="P:DarkRift.Server.Plugins.EntityGroup`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.EntityGroup`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="F:DarkRift.Server.Plugins.EntityGroup`1.backing">
            <summary>
                The set backing this collection.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.EntityGroup`1.#ctor">
            <summary>
                Creates an empty <see cref="T:DarkRift.Server.Plugins.EntityGroup`1"/>.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.EntityGroup`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Shallow copies the entities from the group provided.
            </summary>
            <param name="group">The group to copy elements from</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.EntityGroup`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.EntityGroup`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.EntityGroup`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.EntityGroup`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.EntityGroup`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.EntityGroup`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.EntityGroup`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.EntityGroup`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.Plugins.HealthCheck.HttpHealthCheck">
            <summary>
                Implements a simple HTTP health check.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.HealthCheck.HttpHealthCheck.emptyArray">
            <summary>
                Static empty array to reduce GC.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.HealthCheck.HttpHealthCheck.httpListener">
            <summary>
                The HTTP listener in use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.HealthCheck.HttpHealthCheck.host">
            <summary>
                The HTTP host we are listening on.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.HealthCheck.HttpHealthCheck.port">
            <summary>
                The HTTP port we are listening on.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.HealthCheck.HttpHealthCheck.path">
            <summary>
                The HTTP path we are listening on.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.HealthCheck.HttpHealthCheck.listenThread">
            <summary>
                The background thread listening for health check requests.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.HealthCheck.HttpHealthCheck.running">
            <summary>
                If the serevr is still running or not.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Listeners.Bichannel.AbstractBichannelListener">
            <summary>
                Abstract base class for bichannel listeners.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.AbstractBichannelListener.UdpPort">
            <summary>
                The UDP port being listened on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.AbstractBichannelListener.NoDelay">
            <summary>
                Whether Nagle's algorithm should be disabled.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.AbstractBichannelListener.MaxTcpBodyLength">
            <summary>
                The maximum size the client can ask a TCP body to be without being striked.
            </summary>
            <remarks>This defaults to 65KB.</remarks>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.AbstractBichannelListener.#ctor(DarkRift.Server.NetworkListenerLoadData)">
            <summary>
                Creates a new bichannel listener with the given load data.
            </summary>
            <param name="networkListenerLoadData">The load data for thsi listener.</param>
        </member>
        <member name="T:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListener">
            <summary>
                Listener for TCP/UDP bichannel network connections.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListener.#ctor(DarkRift.Server.NetworkListenerLoadData)">
            <summary>
                Creates a new network listener.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListener.StartListening">
            <summary>
                Begins accepting new connections.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListener.TcpAcceptCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when a new client has been accepted.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListener.UdpMessageReceived(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when a new UDP packet is received on the listening port.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.TcpListener">
            <summary>
                The TCP listening socket.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.UdpListener">
            <summary>
                The UDP listening socket.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.UdpPort">
            <summary>
                The UDP port being listened on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.NoDelay">
            <summary>
                Whether Nagle's algorithm should be disabled.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.PendingTcpSockets">
            <summary>
                Dictionary of TCP connections awaiting their UDP counterpart.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.PendingConnection">
            <summary>
                Represents a connection to the server awaiting the UDP channel to connect.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.PendingConnection.TcpSocket">
            <summary>
                The TCP socket connected.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.PendingConnection.Timer">
            <summary>
                The timer for timing out the connection request.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.UdpConnections">
            <summary>
                The UDP connections to the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.MaxTcpBodyLength">
            <summary>
                The maximum size the client can ask a TCP body to be without being striked.
            </summary>
            <remarks>This defaults to 65KB.</remarks>
        </member>
        <member name="F:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.connectionAttemptTimeoutsCounter">
            <summary>
            Counter for the number of connections attempts that have timed out.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.BindSockets">
            <summary>
                Binds the sockets to their ports.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.HandleTcpConnection(System.Net.Sockets.Socket)">
            <summary>
                Handles new TCP connections from main or fallback methods.
            </summary>
            <param name="acceptSocket">The socket accepted.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.ConnectionTimeoutHandler(System.Object)">
            <summary>
                Called when a connection times out due to lack the of a UDP connection.
            </summary>
            <param name="state">The token given to the connection.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.CancelPendingTcpConnection(System.Int64)">
            <summary>
                Cancels a pending TCP socket and timers.
            </summary>
            <param name="token">The identification token for the connection.</param>
            <returns>The endpoint associated with the connection.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.HandleUdpConnection(DarkRift.MessageBuffer,System.Net.EndPoint)">
            <summary>
                Handles a new connection to the UDP listener.
            </summary>
            <param name="buffer">The buffer sent as an entry.</param>
            <param name="remoteEndPoint">The originating endpoint.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.RegisterUdpConnection(DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection)">
            <summary>
                Subscribes a connection to receive messages.
            </summary>
            <param name="connection">The connection to subscribe.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.UnregisterUdpConnection(DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection)">
            <summary>
                Unsubscribes a connection from receiveing messages.
            </summary>
            <param name="connection">The connection to subscribe.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelListenerBase.SendUdpBuffer(System.Net.EndPoint,DarkRift.MessageBuffer,System.Action{System.Int32,System.Net.Sockets.SocketError})">
            <summary>
                Sends a buffer to the given endpoint using the UDP socket.
            </summary>
            <param name="remoteEndPoint">The end point to send to.</param>
            <param name="message">The message to send.</param>
            <param name="completed">The function to invoke once the send is completed.</param>
        </member>
        <member name="T:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection">
            <summary>
                A connection to a remote cliente and handles TCP and UDP channels.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.CanSend">
            <summary>
                Is this client able to send or not.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.IsListening">
            <summary>
                Is this client currently listening for messages or not.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.RemoteTcpEndPoint">
            <summary>
                The end point of the remote client on TCP.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.RemoteUdpEndPoint">
            <summary>
                The end point of the remote client on UDP.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.NoDelay">
            <summary>
                Whether Nagel's algorithm should be disabled or not.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.AuthToken">
            <summary>
                The token used to authenticate this user's UDP connection.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.ConnectionState">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.RemoteEndPoints">
            <inheritdoc/>
        </member>
        <member name="F:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.tcpSocket">
            <summary>
                The socket used in TCP communication.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.networkListener">
            <summary>
                The listener used in UDP communication.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.bytesSentCounterTcp">
            <summary>
            Counter for the number of bytes sent via TCP by the listener.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.bytesSentCounterUdp">
            <summary>
            Counter for the number of bytes sent via UDP by the listener.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.bytesReceivedCounterTcp">
            <summary>
            Counter for the number of bytes received via TCP by the listener.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.bytesReceivedCounterUdp">
            <summary>
            Counter for the number of bytes received via UDP by the listener.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.StartListening">
            <summary>
                Begins listening for data.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.SendMessageReliable(DarkRift.MessageBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.SendMessageUnreliable(DarkRift.MessageBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.Disconnect">
            <summary>
                Disconnects this client from the remote host.
            </summary>
            <returns>Whether the disconnect was successful.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.ReceiveHeaderAndBody(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Receives TCP header followed by a TCP body, looping until the operation becomes asynchronous.
            </summary>
            <param name="args">The socket args to use during the operations.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.AsyncReceiveHeaderCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Event handler for when a TCP header has been received.
            </summary>
            <param name="sender">The invoking object.</param>
            <param name="args">The socket args used during the operation.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.AsyncReceiveBodyCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Event handler for when a TCP body has been received.
            </summary>
            <param name="sender">The invoking object.</param>
            <param name="args">The socket args used during the operation.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.IsHeaderReceiveComplete(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Checks if a TCP header was received in its entirety.
            </summary>
            <param name="args">The socket args used during the operation.</param>
            <returns>If the whole header has been received.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.IsBodyReceiveComplete(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Checks if a TCP body was received in its entirety.
            </summary>
            <param name="args">The socket args used during the operation.</param>
            <returns>If the whole body has been received.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.ProcessHeader(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Processes a TCP header received.
            </summary>
            <param name="args">The socket args used during the operation.</param>
            <returns>The number of bytes in the body.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.ProcessBody(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Processes a TCP body received.
            </summary>
            <param name="args">The socket args used during the operation.</param>
            <returns>The buffer received.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.ProcessMessage(DarkRift.MessageBuffer)">
            <summary>
                Invokes message recevied events and cleans up.
            </summary>
            <param name="buffer">The TCP body received.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.WasHeaderReceiveSucessful(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Checks if a TCP header was received correctly.
            </summary>
            <param name="args">The socket args used during the operation.</param>
            <returns>If the receive completed correctly.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.WasBodyReceiveSucessful(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Checks if a TCP body was received correctly.
            </summary>
            <param name="args">The socket args used during the operation.</param>
            <returns>If the receive completed correctly.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.HandleDisconnectionDuringHeaderReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Handles a disconnection while receiving a TCP header.
            </summary>
            <param name="args">The socket args used during the operation.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.HandleDisconnectionDuringBodyReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Handles a disconnection while receiving a TCP body.
            </summary>
            <param name="args">The socket args used during the operation.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.SetupReceiveHeader(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Setup a listen operation for a new TCP header.
            </summary>
            <param name="args">The socket args to use during the operation.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.SetupReceiveBody(System.Net.Sockets.SocketAsyncEventArgs,System.Int32)">
            <summary>
                Setup a listen operation for a new TCP body.
            </summary>
            <param name="args">The socket args to use during the operation.</param>
            <param name="length">The number of bytes in the body.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.UpdateBufferPointers(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Updates the pointers on the buffer to continue a receive operation.
            </summary>
            <param name="args">The socket args to update.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.HandleUdpMessage(DarkRift.MessageBuffer)">
            <summary>
                Handles a UDP message sent to the listener.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.TcpSendCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
                Called when a TCP send has completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.UdpSendCompleted(System.Int32,System.Net.Sockets.SocketError)">
            <summary>
                Called when a UDP send has completed.
            </summary>
            <param name="bytesSent">The number of bytes sent.</param>
            <param name="e">The socket error that was returned.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.UnregisterAndDisconnect(System.Net.Sockets.SocketError)">
            <summary>
                Called when a socket error has occured.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.BichannelServerConnection.GetRemoteEndPoint(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.CompatibilityBichannelListener.TcpAcceptCompleted(System.IAsyncResult)">
            <summary>
                Called when a new client has been accepted through the fallback accept.
            </summary>
            <param name="result">The result of the accept.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Listeners.Bichannel.CompatibilityBichannelListener.UdpMessageReceived(System.IAsyncResult)">
            <summary>
                Called when a UDP message is received on the fallback system.
            </summary>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="T:DarkRift.Server.Plugins.LogWriters.ColorsOnWindows">
            https://www.jerriepelser.com/blog/using-ansi-color-codes-in-net-console-apps/
        </member>
        <member name="T:DarkRift.Server.Plugins.LogWriters.ConsoleWriter">
            <summary>
                Log writer that outputs to the console.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.Version">
            <inheritdoc/>
        </member>
        <member name="F:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.foregroundColours">
            <summary>
                The lookup table for the foreground colors to print with.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.backgroundColours">
            <summary>
                The lookup table for the background colours to print with.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.ansiColours">
            <summary>
                The lookup table for the ANSI colour codes to print with.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.consoleLock">
            <summary>
                Lock for console writes.
            </summary>
            <remarks>
                Technically, Console is thread safe but if we don't have this then colours get mixed up with fast writes.
            </remarks>
        </member>
        <member name="F:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.useFastAnsiColoring">
            <summary>
                Whether the faster ANSI color code coloring should be used for rendering or not.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.#ctor(DarkRift.Server.LogWriterLoadData)">
            <summary>
                Creates a new console writer with the plugins load data.
            </summary>
            <param name="logWriterLoadData">The data to load the logwriter with.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.WriteEvent(DarkRift.Server.WriteEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.WriteWithAnsiColorCodes(DarkRift.Server.WriteEventArgs)">
            <summary>
                Renders the output using ANSI color codes.
            </summary>
            <param name="args">The args passed to the event.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.ConsoleWriter.WriteWithConsoleColor(DarkRift.Server.WriteEventArgs)">
            <summary>
                Renders the output using the console coloring methods.
            </summary>
            <param name="args">The args passed to the event.</param>
        </member>
        <member name="T:DarkRift.Server.Plugins.LogWriters.DebugWriter">
            <summary>
                A log writer that writes all output to debug.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.LogWriters.DebugWriter.Version">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.DebugWriter.#ctor(DarkRift.Server.LogWriterLoadData)">
            <summary>
                Creates a new debug log writer using the given plugin load data.
            </summary>
            <param name="logWriterLoadData">The data for this log writer.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.DebugWriter.WriteEvent(DarkRift.Server.WriteEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.Plugins.LogWriters.FileWriter">
            <summary>
                Creates a new log writer that outputs to a file.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.LogWriters.FileWriter.Version">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.LogWriters.FileWriter.LogFileStream">
            <summary>
                The stream to the log file to write to.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.LogWriters.FileWriter.LogFilePath">
            <summary>
                The directory we are writing to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.FileWriter.#ctor(DarkRift.Server.LogWriterLoadData)">
            <summary>
                Creates a new file writer with the given plugin load data.
            </summary>
            <param name="logWriterLoadData">The data for this plugin.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.FileWriter.WriteEvent(DarkRift.Server.WriteEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.LogWriters.FileWriter.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.Plugins.Matchmaking.GroupFormedEventArgs`1">
            <summary>
                Event args for the <see cref="E:DarkRift.Server.Plugins.Matchmaking.IMatchmaker`1.GroupFormed"/> event.
            </summary>
            <remarks>
                <c>Pro only.</c>
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.GroupFormedEventArgs`1.SubGroups">
            <summary>
                The groups of entities combined to form this group.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.GroupFormedEventArgs`1.Group">
            <summary>
                The group formed as a single list of entities.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.GroupFormedEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{DarkRift.Server.Plugins.EntityGroup{`0}},System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Constructor for the event args.
            </summary>
            <param name="subGroups">The groups queued that compose the formed group.</param>
            <param name="group">The individual entities in the group.</param>
        </member>
        <member name="T:DarkRift.Server.Plugins.Matchmaking.IMatchmaker`1">
            <summary>
                Base interface for all matchmaker implementations.
            </summary>
            <typeparam name="T">The type of entity the matchmaker operates with.</typeparam>
            <remarks>
                <c>Pro only.</c>
            </remarks>
        </member>
        <member name="E:DarkRift.Server.Plugins.Matchmaking.IMatchmaker`1.GroupFormed">
            <summary>
                Event invoked when a group of entities has been formed.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.IMatchmaker`1.Enqueue(`0,System.EventHandler{DarkRift.Server.Plugins.Matchmaking.MatchmakingStateChangedEventArgs{`0}})">
            <summary>
                Enqueues an entity into the matchmaker.
            </summary>
            <param name="entity">The entity to enqueue.</param>
            <param name="callback">The callback to make when the matchmnaking state changes for this entity, null to omit.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.IMatchmaker`1.EnqueueGroup(DarkRift.Server.Plugins.EntityGroup{`0},System.EventHandler{DarkRift.Server.Plugins.Matchmaking.MatchmakingStateChangedEventArgs{`0}})">
            <summary>
                Enqueues a group of entities into the matchmaker.
            </summary>
            <param name="entities">The entities to enqueue.</param>
            <param name="callback">The callback to make when the matchmnaking state changes for this entity, null to omit.</param>
            <remarks>
                Groups of entities enqueued using this method will be guaranteed to be placed in a room together 
                (provided there are not more in the group than <see cref="P:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.EntitiesPerGroup"/>) even if they would 
                normally rank each other under the <see cref="P:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.DiscardThreshold"/>).
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.IMatchmaker`1.EnqueueGroup(System.Collections.Generic.IEnumerable{`0},System.EventHandler{DarkRift.Server.Plugins.Matchmaking.MatchmakingStateChangedEventArgs{`0}})">
            <summary>
                Enqueues a group of entities into the matchmaker.
            </summary>
            <param name="entities">The entities to enqueue.</param>
            <param name="callback">The callback to make when the matchmnaking state changes for this entity, null to omit.</param>
            <remarks>
                Groups of entities enqueued using this method will be guaranteed to be placed in a room together 
                (provided there are not more in the group than <see cref="P:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.EntitiesPerGroup"/>) even if they would 
                normally rank each other under the <see cref="P:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.DiscardThreshold"/>).
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.IMatchmaker`1.PerformFullSearch">
            <summary>
                Attempts to match all clients in the queue
            </summary>
            <remarks>
                This will block flush all in/out queues and perform a full search. If a search is 
                already in progress this method will block until it completes. Normallly you would 
                perform searches from the timers already setup rather than calling this method 
                directly.
            </remarks>
        </member>
        <member name="T:DarkRift.Server.Plugins.Matchmaking.IMatchmakerQueueTask`1">
            <summary>
                Represents currently queued entities in a matchmaker.
            </summary>
            <typeparam name="T">The type of objects used as entities.</typeparam>
            <remarks>
                <c>Pro only.</c>
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.IMatchmakerQueueTask`1.Callback">
            <summary>
                The event handler for state changes with this group.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.IMatchmakerQueueTask`1.MatchmakingState">
            <summary>
                The state of the entities in the matchmaker.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.IMatchmakerQueueTask`1.Matchmaker">
            <summary>
                The matchmaker this task belongs to.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.IMatchmakerQueueTask`1.Entities">
            <summary>
                The entities in this matchmaking group.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.IMatchmakerQueueTask`1.Cancel">
            <summary>
                Attempts to cancel matchmaking for this group.
            </summary>
            <remarks>
                If successfully cancelled, <see cref="P:DarkRift.Server.Plugins.Matchmaking.IMatchmakerQueueTask`1.Callback"/> will be invoked with <see cref="F:DarkRift.Server.Plugins.Matchmaking.MatchmakingState.Cancelled"/>.
            </remarks>
        </member>
        <member name="T:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder">
            <summary>
                Helper class for generating the rankings used by the <see cref="T:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1"/>.
            </summary>
            <remarks>
                This class can be used to help build up a matchmaking ranking for complex objects.
                
                For example, imagine we have 3 properties class, level, and highscore and we would 
                like level to be the largest influence on ranking and prefer entities with different 
                classes to be matched together. We can use a MinimiseDifference on both level and 
                highscore to prefer entities with similar values and a NotEqual on our class type. 
                To ensure level has the largest influence we might split our weighting values to 
                0.25, 0.5, 0.25 respectively.
                
                It is important that the weighting of all comparisons totals 1. Without this the 
                ranking value may exceed the 0-1 range that it should fall within and this will 
                cause mistakes in the generated rankings.
                
                This is not thread safe.
                
                <c>Pro only.</c>
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.Ranking">
            <summary>
                The ranking between the two entities.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.ranking">
            <summary>
                The calculated ranking.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.Failed">
            <summary>
                Indicates that <see cref="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.Fail"/> was called.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.#ctor">
            <summary>
                Creates a new <see cref="T:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder"/>.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.MinimiseDifferenceLinear(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Instructs that a better ranking would have less defference between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="maxDifference">The maximum difference possibel between the values. E.g. if the scale is -100 to +100, the maximum difference is 200.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.MinimiseDifferenceLinear(System.Double,System.Double,System.Double,System.Single)">
            <summary>
                Instructs that a better ranking would have less defference between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="maxDifference">The maximum difference possibel between the values. E.g. if the scale is -100 to +100, the maximum difference is 200.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.MinimiseDifferenceLinear(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
                Instructs that a better ranking would have less defference between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="maxDifference">The maximum difference possibel between the values. E.g. if the scale is -100 to +100, the maximum difference is 200.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.MinimiseDifferenceLinear(System.Int64,System.Int64,System.Int64,System.Single)">
            <summary>
                Instructs that a better ranking would have less defference between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="maxDifference">The maximum difference possibel between the values. E.g. if the scale is -100 to +100, the maximum difference is 200.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.MaximiseDifferenceLinear(System.Single,System.Single,System.Single,System.Single)">
            <summary>
                Instructs that a better ranking would have more defference between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="maxDifference">The maximum difference possibel between the values. E.g. if the scale is -100 to +100, the maximum difference is 200.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.MaximiseDifferenceLinear(System.Double,System.Double,System.Double,System.Single)">
            <summary>
                Instructs that a better ranking would have more defference between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="maxDifference">The maximum difference possibel between the values. E.g. if the scale is -100 to +100, the maximum difference is 200.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.MaximiseDifferenceLinear(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
                Instructs that a better ranking would have more defference between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="maxDifference">The maximum difference possibel between the values. E.g. if the scale is -100 to +100, the maximum difference is 200.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.MaximiseDifferenceLinear(System.Int64,System.Int64,System.Int64,System.Single)">
            <summary>
                Instructs that a better ranking would have more defference between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="maxDifference">The maximum difference possibel between the values. E.g. if the scale is -100 to +100, the maximum difference is 200.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.Equal(System.Single,System.Single,System.Single)">
            <summary>
                Instructs that a better ranking would have the same value between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.Equal(System.Double,System.Double,System.Single)">
            <summary>
                Instructs that a better ranking would have the same value between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.Equal(System.Int32,System.Int32,System.Single)">
            <summary>
                Instructs that a better ranking would have the same value between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.Equal(System.Int64,System.Int64,System.Single)">
            <summary>
                Instructs that a better ranking would have the same value between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.Equal``1(System.IEquatable{``0},System.IEquatable{``0},System.Single)">
            <summary>
                Instructs that a better ranking would have the same value between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.NotEqual(System.Single,System.Single,System.Single)">
            <summary>
                Instructs that a better ranking would have the difference values between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.NotEqual(System.Double,System.Double,System.Single)">
            <summary>
                Instructs that a better ranking would have the difference values between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.NotEqual(System.Int32,System.Int32,System.Single)">
            <summary>
                Instructs that a better ranking would have the difference values between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.NotEqual(System.Int64,System.Int64,System.Single)">
            <summary>
                Instructs that a better ranking would have the difference values between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.NotEqual``1(System.IEquatable{``0},System.IEquatable{``0},System.Single)">
            <summary>
                Instructs that a better ranking would have the same value between the two given value.
            </summary>
            <param name="a">The first entity's value.</param>
            <param name="b">The second entity's value.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.IsTrue(System.Boolean,System.Single)">
            <summary>
                Instructs that a better ranking would hold this condition.
            </summary>
            <param name="b">The outcome of the condition.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.IsFalse(System.Boolean,System.Single)">
            <summary>
                Instructs that a better ranking would not hold this condition.
            </summary>
            <param name="b">The outcome of the condition.</param>
            <param name="weight">The weighting to give this comparison.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.Fail">
            <summary>
                Instructs that this pair should not be ranked together.
            </summary>
            <remarks>
                This does not early out the ranking algorithm and instead just forces <see cref="P:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.Ranking"/>
                to return 0. Therefore it is desirable that you should immediately return from the ranking 
                after calling this, if possible, to avoid any further unecessary computation.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakerRankingBuilder.Clear">
            <summary>
                Clears the ranking and resets the builder.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Matchmaking.MatchmakingState">
            <summary>
                The state of a matchmaking operation by an <see cref="T:DarkRift.Server.Plugins.Matchmaking.IMatchmaker`1"/>.
            </summary>
            <remarks>
                <c>Pro only.</c>
            </remarks>
        </member>
        <member name="F:DarkRift.Server.Plugins.Matchmaking.MatchmakingState.Pending">
            <summary>
                Indicates the matchmaking operation has not yet been passed to the matchmaker.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Matchmaking.MatchmakingState.Queued">
            <summary>
                Indicates the matchmaking operation is queued in the matchmaker.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Matchmaking.MatchmakingState.Success">
            <summary>
                Indicates the matchmakign operation succeeded.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Matchmaking.MatchmakingState.Cancelled">
            <summary>
                Indicates the matchmaking operation was cancelled.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Matchmaking.MatchmakingStateChangedEventArgs`1">
            <summary>
                Event args for changes to a groups's matchmaking state.
            </summary>
            <typeparam name="T">The type of object being matched.</typeparam>
            <remarks>
                <c>Pro only.</c>
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.MatchmakingStateChangedEventArgs`1.MatchmakingState">
            <summary>
                The new state of the matchmaking operation.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.MatchmakingStateChangedEventArgs`1.SubGroups">
            <summary>
                The sub groups the state change occured for.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.MatchmakingStateChangedEventArgs`1.Entities">
            <summary>
                The entities the matchmaking state change occurred for.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.MatchmakingStateChangedEventArgs`1.#ctor(DarkRift.Server.Plugins.Matchmaking.MatchmakingState,System.Collections.Generic.IEnumerable{DarkRift.Server.Plugins.EntityGroup{`0}},System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Creates new event args with the given state.
            </summary>
            <param name="matchmakingState">The new matchmaking state.</param>
            <param name="subGroups">The subgroups that the matchamking state change occured for.</param>
            <param name="entities">The entities the matchmaking state change occurred for.</param>
        </member>
        <member name="T:DarkRift.Server.Plugins.Matchmaking.MatchRankingContext`1">
            <summary>
                Provides additional information about a ranking operation.
            </summary>
            <typeparam name="T">The type of entities being ranked.</typeparam>
            <remarks>
                <c>Pro only.</c>
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.MatchRankingContext`1.DiscardThreshold">
            <summary>
                The threshold at which a ranking will not be considered at all.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1">
            <summary>
                Assign entities into groups based on a ranking between them.
            </summary>
            <typeparam name="T">The type of object the groups are being formed for.</typeparam>
            <remarks>
                <c>Pro only.</c>
            </remarks>
        </member>
        <member name="T:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.Match">
            <summary>
                Holder for matches with other entities.
            </summary>
        </member>
        <member name="T:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.QueueGroup">
            <summary>
                Information for a group in queue.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.queue">
            <summary>
                The list of entities in queue. Should not be edited outside of the tick method, use <see cref="F:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.queueSnapshot"/> instead.
            </summary>
            <remarks>
                A linked list is used here instead of a queue as we need to be able to remove at an arbitrary point in case of cancellation.
                It's just a little more advanced.
            </remarks>
        </member>
        <member name="F:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.queueSnapshot">
            <summary>
                The snapshot of the queue before each tick.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.inQueue">
            <summary>
                The entities being enqueued next flush.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.outQueue">
            <summary>
                The entity groups being dequeued next flush.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.DiscardThreshold">
            <summary>
                The threshold at which a match will be immediately discarded.
            </summary>
            <remarks>
                When the matchmaker analyzes the set of entities to find possible matches it
                calculates the suitability metric for all entity pairs. If the score
                returned by <see cref="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.GetSuitabilityMetric(`0,`0,DarkRift.Server.Plugins.Matchmaking.MatchRankingContext{`0})"/> 
                is below the DiscardThreshold it will not be considered any further in 
                trimming the search tree substantially.
                
                Increasing this value will improve performance and memory usage but may return 
                worse results and cause longer wait times.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.GroupDiscardThreshold">
            <summary>
                The threshold at which a match will be immediately discarded.
            </summary>
            <remarks>
                When the matchmaker analyzes the set of entities to find possible matches it
                calculates the average suitability metric between each group (or group of one for 
                individuals). If the average score calculated is below the GroupDiscardThreshold 
                it will not be considered any further in computation therefore trimming the search tree substantially.
                
                Increasing this value will improve performance and memory usage but may return 
                worse results and cause longer wait times.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.EntitiesPerGroup">
            <summary>
                The number of entities to collate to form a room.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.TickPeriod">
            <summary>
                The time in milliseconds between full searches are carried out.
            </summary>
        </member>
        <member name="E:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.GroupFormed">
            <inheritdoc />
        </member>
        <member name="F:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.timer">
            <summary>
                The timer invoking <see cref="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.Tick(System.Object,System.Timers.ElapsedEventArgs)"/>.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.#ctor(DarkRift.Server.PluginLoadData)">
            <summary>
                Creates a new RankingMatchmaker/>.
            </summary>
            <param name="pluginLoadData">The data to load with.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.Loaded(DarkRift.Server.LoadedEventArgs)">
            <summary>
                Method invoked when the server is loaded.
            </summary>
            <param name="args">The event args.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.GetSuitabilityMetric(`0,`0,DarkRift.Server.Plugins.Matchmaking.MatchRankingContext{`0})">
            <summary>
                Returns a suitability metric for the given entity pair.
            </summary>
            <param name="entity1">The first entity.</param>
            <param name="entity2">The second entity.</param>
            <param name="context">Additional information about the ranking.</param>
            <returns>A value between 0 and 1 indicating the suitability where 1 is the perfect match for each other and 0 is the worst possible match.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.Enqueue(`0,System.EventHandler{DarkRift.Server.Plugins.Matchmaking.MatchmakingStateChangedEventArgs{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.EnqueueGroup(System.Collections.Generic.IEnumerable{`0},System.EventHandler{DarkRift.Server.Plugins.Matchmaking.MatchmakingStateChangedEventArgs{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.EnqueueGroup(DarkRift.Server.Plugins.EntityGroup{`0},System.EventHandler{DarkRift.Server.Plugins.Matchmaking.MatchmakingStateChangedEventArgs{`0}})">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.AddMatchesToQueueGroup(DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker{`0}.QueueGroup,System.Collections.Generic.IEnumerable{DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker{`0}.QueueGroup},DarkRift.Server.Plugins.Matchmaking.MatchRankingContext{`0})">
            <summary>
                Calculates and adds matches to the given group.
            </summary>
            <param name="group">The group to calculate for.</param>
            <param name="groups">The groups to calculate against.</param>
            <param name="context">The context for the matchmaker.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.Cancel(DarkRift.Server.Plugins.Matchmaking.RankingMatchmakerQueueTask{`0})">
            <summary>
                Cancels a given task
            </summary>
            <param name="task">The task to cancel.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.Tick(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
                Performs a full search.
            </summary>
            <param name="sender">The timer that invoked the tick.</param>
            <param name="args">The event arguments provided by the timer.</param>
            <remarks>
                !!! BEWARE !!!
                This executes on a separate thread regardless of the threadsafe settings in DarkRift!
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.PerformFullSearch">
            <summary>
                Attempts to match all clients in the queue.
            </summary>
            <remarks>
                This will block flush all in/out queues and perform a full search. If a search is 
                already in progress this method will block until it completes. Normallly you would 
                perform searches from the timers already setup rather than calling this method 
                directly.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.FlushInQueue">
            <summary>
                Flushes all entities from the in queue into the matchmaker.
            </summary>
            <returns>The groups inserted into the queue.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.FlushOutQueue">
            <summary>
                Flushes all the entities in the out queue from the matchmaker.
            </summary>
            <returns>The groups removed from the queue.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.SnapshotQueue">
            <summary>
                Takes a snapshot of the queue for the enqueue method to use.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.DoFullSearch">
            <summary>
                Attempts to match all clients in the queue
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.InformInsertedOrRemoved(System.Collections.Generic.IEnumerable{DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker{`0}.QueueGroup},DarkRift.Server.Plugins.Matchmaking.MatchmakingState)">
            <summary>
                Informs those who were inserted or removed from the queue.
            </summary>
            <param name="toInform">The groups enqueued to inform.</param>
            <param name="newState">The new state of the groups.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.InformGroupsFormed(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker{`0}.QueueGroup}})">
            <summary>
                Informs the those in the groups that have been formed about the groups.
            </summary>
            <param name="toInform">The groups formed.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.PerformSearch(System.Collections.Generic.IEnumerable{DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker{`0}.QueueGroup})">
            <summary>
                Performs a search starting at the given entity.
            </summary>
            <param name="startGroup">The starting group.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1.Dispose(System.Boolean)">
            <summary>
                Disposes this matchmaker.
            </summary>
            <param name="disposing">Whether the matchmaker is being disposed or not.</param>
        </member>
        <member name="T:DarkRift.Server.Plugins.Matchmaking.RankingMatchmakerQueueTask`1">
            <summary>
                A matchmmaker task for the <see cref="T:DarkRift.Server.Plugins.Matchmaking.RankingMatchmaker`1"/>.
            </summary>
            <typeparam name="T">The type of objects being used as entities.</typeparam>
            <remarks>
                <c>Pro only.</c>
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.RankingMatchmakerQueueTask`1.Callback">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.RankingMatchmakerQueueTask`1.Matchmaker">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.RankingMatchmakerQueueTask`1.MatchmakingState">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.Matchmaking.RankingMatchmakerQueueTask`1.Entities">
            <inheritdoc/>
        </member>
        <member name="F:DarkRift.Server.Plugins.Matchmaking.RankingMatchmakerQueueTask`1.matchmaker">
            <summary>
                The ranking matchmater in use.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmakerQueueTask`1.Cancel">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Matchmaking.RankingMatchmakerQueueTask`1.SetMatchmakingState(DarkRift.Server.Plugins.Matchmaking.MatchmakingState,System.Collections.Generic.IEnumerable{DarkRift.Server.Plugins.EntityGroup{`0}},System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Sets the matchmaking state and invokes the callback.
            </summary>
            <param name="newState">The new state.</param>
            <param name="subGroups">The subgroups now involved.</param>
            <param name="entities">The entities now involved.</param>
        </member>
        <member name="T:DarkRift.Server.Plugins.MessageSinkSourceEntityGroup`1">
            <summary>
                Holds a group of entities that implement <see cref="T:DarkRift.Server.IMessageSinkSource"/> such as <see cref="T:DarkRift.Server.IClient"/>.
            </summary>
            <remarks>
                This type is not thread safe.
            </remarks>
            <typeparam name="T">The type of entities to contain.</typeparam>
        </member>
        <member name="E:DarkRift.Server.Plugins.MessageSinkSourceEntityGroup`1.MessageReceived">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.Plugins.MessageSinkSourceEntityGroup`1.#ctor">
            <summary>
                Creates an empty <see cref="T:DarkRift.Server.Plugins.EntityGroup`1"/>.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.MessageSinkSourceEntityGroup`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Shallow copies the entities from the group provided.
            </summary>
            <param name="group">The group to copy elements from</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.MessageSinkSourceEntityGroup`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.MessageSinkSourceEntityGroup`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.MessageSinkSourceEntityGroup`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.MessageSinkSourceEntityGroup`1.MessageReceivedHandler(System.Object,DarkRift.Server.MessageReceivedEventArgs)">
            <summary>
                Handles a message received from any group memeber.
            </summary>
            <param name="sender">The group member that sent it.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.MessageSinkSourceEntityGroup`1.SendMessage(DarkRift.Message,DarkRift.SendMode)">
            <inheritdoc/>
        </member>
        <member name="T:DarkRift.Server.Plugins.Metrics.Prometheus.CounterMetric">
            <summary>
            Implementation of <see cref="T:DarkRift.Server.Metrics.ICounterMetric"/> for Prometheus.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.CounterMetric.Name">
            <inheritDoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.CounterMetric.Description">
            <inheritDoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.CounterMetric.Value">
            <summary>
            The current counter value.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.CounterMetric.Preformatted">
            <summary>
            The Prometheus preformatted metric string.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.CounterMetric.value">
            <summary>
             The current counter value.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.CounterMetric.Increment">
            <inheritDoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.CounterMetric.Increment(System.Double)">
            <inheritDoc/>
        </member>
        <member name="T:DarkRift.Server.Plugins.Metrics.Prometheus.GaugeMetric">
            <summary>
            Implementation of <see cref="T:DarkRift.Server.Metrics.IGaugeMetric"/> for Prometheus.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.GaugeMetric.Name">
            <inheritDoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.GaugeMetric.Description">
            <inheritDoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.GaugeMetric.Value">
            <summary>
            The current gauge value.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.GaugeMetric.Preformatted">
            <summary>
                The preformatted metric text.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.GaugeMetric.value">
            <summary>
                The current counter value.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.GaugeMetric.Report(System.Double)">
            <inheritDoc/>
        </member>
        <member name="T:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric">
            <summary>
            Implementation of <see cref="T:DarkRift.Server.Metrics.IHistogramMetric"/> for Prometheus.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric.Name">
            <inheritDoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric.Description">
            <inheritDoc/>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric.Sum">
            <summary>
            The current sum.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric.Count">
            <summary>
            The current count.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric.PreformattedBuckets">
            <summary>
            The preformatted metric texts for buckets.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric.PreformattedSum">
            <summary>
            The preformatted metric text for sum.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric.PreformattedCount">
            <summary>
            The preformatted metric text for count.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric.sum">
            <summary>
            The current sum.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric.bucketUpperBounds">
            <summary>
            The current upper bound of each buckets.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric.bucketCounts">
            <summary>
            The current counts of each buckets.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric.Report(System.Double)">
            <inheritDoc/>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.HistogramMetric.GetBucketCount(System.Int32)">
            <summary>
            Returns the count of values in a bucket.
            </summary>
            <param name="bucketIndex">The index of the bucket to retrieve the sum for.</param>
            <returns>The count of values in that bucket.</returns>
        </member>
        <member name="T:DarkRift.Server.Plugins.Metrics.Prometheus.InterlockedDouble">
            <summary>
            Helpful interlocked methods for doubles.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.InterlockedDouble.Read(System.Double@)">
            <summary>
            Read a double atomically.
            </summary>
            <param name="location">The reference to the double to read.</param>
            <returns>The value of the double.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.InterlockedDouble.Add(System.Double@,System.Double)">
            <summary>
            Add a value to a double atomically.
            </summary>
            <param name="location">The location of the double to add to.</param>
            <param name="value">The value to add to the double.</param>
            <returns>The new value of the double.</returns>
        </member>
        <member name="T:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint">
            <summary>
            Implements a HTTP endpoint exposing metrics for Prometheus.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.DEFAULT_BUCKETS">
            <summary>
            The default buckets to use in a histogram metric.
            </summary>
            <remarks>
            Last bucket must always be +Inf.
            </remarks>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.emptyArray">
            <summary>
            Static empty array to reduce GC.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.httpListener">
            <summary>
            The HTTP listener in use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.host">
            <summary>
            The HTTP host we are listening on.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.port">
            <summary>
            The HTTP port we are listening on.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.path">
            <summary>
            The HTTP path we are listening on.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.listenThread">
            <summary>
            The background thread listening for health check requests.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.running">
            <summary>
            If the serevr is still running or not.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.CreateCounter(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.CreateCounter(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.CreateGauge(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.CreateGauge(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.CreateHistogram(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.CreateHistogram(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.CreateHistogram(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String,System.Double[])">
            <summary>
            Creates an <see cref="T:DarkRift.Server.Metrics.IHistogramMetric"/> that writes to this writer.
            </summary>
            <param name="metricsCollector">The <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/> used to create the metric.</param>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <param name="buckets">The upper bounds of the buckets to aggregate into in ascending order, a bucket with value <see cref="F:System.Double.PositiveInfinity"/> is always present.</param>
            <returns>The created <see cref="T:DarkRift.Server.Metrics.IHistogramMetric"/>.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.CreateHistogram(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String,System.Double[],System.String[])">
            <summary>
            Creates a tagged metric builder for an <see cref="T:DarkRift.Server.Metrics.IHistogramMetric"/> that writes to this writer.
            </summary>
            <param name="metricsCollector">The <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/> used to create the metric.</param>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <param name="buckets">The upper bounds of the buckets to aggregate into in ascending order, a bucket with value <see cref="F:System.Double.PositiveInfinity"/> is always present.</param>
            <param name="tags">The set of tags describing this metric as colon separated pairs.</param>
            <returns>The created <see cref="T:DarkRift.Server.Metrics.IHistogramMetric"/>.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.GetOrCreateCounter(System.String,System.String,System.String)">
            <summary>
            Tries to return a memoised counter metric or else creates a new one.
            </summary>
            <param name="name">The metric name.</param>
            <param name="description">The metric description.</param>
            <param name="formattedMetric">The preformatted metric string.</param>
            <returns>The found or created metric.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.GetOrCreateGauge(System.String,System.String,System.String)">
            <summary>
            Tries to return a memoised gauge metric or else creates a new one.
            </summary>
            <param name="name">The metric name.</param>
            <param name="description">The metric description.</param>
            <param name="formattedMetric">The preformatted metric string.</param>
            <returns>The found or created metric.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.GetOrCreateHistogram(System.String,System.String,System.Double[],System.String,System.String,System.String[])">
            <summary>
            Tries to return a memoised histogram metric or else creates a new one.
            </summary>
            <param name="name">The metric name.</param>
            <param name="description">The metric description.</param>
            <param name="buckets">The buckets to create the histogram for.</param>
            <param name="formattedSumMetric">The preformatted sum metric string.</param>
            <param name="formattedCountMetric">The preformatted count metric string.</param>
            <param name="formattedBuckets">The preformatted bucket metric strings.</param>
            <returns>The found or created metric.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.WriteDocs(System.IO.StreamWriter,System.String,System.String,System.String)">
            <summary>
            Writes a comment to the promethues endpoint stream.
            </summary>
            <param name="writer">The wrtier to write to.</param>
            <param name="metricName">The metric the docs are for.</param>
            <param name="help">The help test to write.</param>
            <param name="type">The type of the metric.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.WriteMetric(System.IO.StreamWriter,System.String,System.Double)">
            <summary>
            Writes a metric to the promethues endpoint stream.
            </summary>
            <param name="writer">The writer to write to.</param>
            <param name="metricName">The name of the metric.</param>
            <param name="value">The value of the metric.</param>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.GetTimestamp">
            <summary>
            Calculates the currently unix timestamp in millis since epoch.
            </summary>
            <returns>The Unix timstamp.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.FormatMetric(System.String,System.String)">
            <summary>
            Formats a metric string for exporting.
            </summary>
            <param name="prefix">The metric prefix to apply to the name.</param>
            <param name="name">The metric name </param>
            <returns>The Prometheius format metric text.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.FormatMetric(System.String,System.String,System.String[],System.String[])">
            <summary>
            Formats a metric string for exporting.
            </summary>
            <param name="prefix">The metric prefix to apply to the name.</param>
            <param name="name">The metric name </param>
            <param name="tags">The tags to add to the metric.</param>
            <param name="tagValues">The values of the tags to add to the metric.</param>
            <returns>The Prometheius format metric text.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.FormatMetric(System.String,System.String,System.Double)">
            <summary>
            Formats a metric string for exporting.
            </summary>
            <param name="prefix">The metric prefix to apply to the name.</param>
            <param name="name">The metric name </param>
            <param name="bucket">The histogram bucket upper bound.</param>
            <returns>The Prometheius format metric text.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.FormatMetric(System.String,System.String,System.String[],System.String[],System.Double)">
            <summary>
            Formats a metric string for exporting.
            </summary>
            <param name="prefix">The metric prefix to apply to the name.</param>
            <param name="name">The metric name </param>
            <param name="tags">The tags to add to the metric.</param>
            <param name="tagValues">The values of the tags to add to the metric.</param>
            <param name="bucket">The histogram bucket upper bound.</param>
            <returns>The Prometheius format metric text.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.FormatPrefix(System.String)">
            <summary>
            Formats a prefix in PascalCase/camelCase to snake_case.
            </summary>
            <param name="prefix">The prefix to format.</param>
            <returns>The prefix in snake case.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.FormatTagString(System.String[],System.String[])">
            <summary>
            Converts tags to Prometheus format.
            </summary>
            <param name="tags">The tags to format.</param>
            <param name="tagValues">The values of the tags to add to the metric.</param>
            <returns>The prometheus style tag string.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.FormatTagString(System.String[],System.String[],System.Double)">
            <summary>
            Converts tags to Prometheus format.
            </summary>
            <param name="tags">The tags to format.</param>
            <param name="tagValues">The values of the tags to add to the metric.</param>
            <param name="bucket">The histogram bucket upper bound.</param>
            <returns>The prometheus style tag string.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusEndpoint.FormatTagString(System.Double)">
            <summary>
            Converts tags to Prometheus format.
            </summary>
            <param name="bucket">The histogram bucket upper bound.</param>
            <returns>The prometheus style tag string.</returns>
        </member>
        <member name="T:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusMetricsCollectorExtensions">
            <summary>
            Provides extensions to the <see cref="T:DarkRift.Server.Metrics.MetricsCollector"/> that enrich it for use with the Prometheus endpoint.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusMetricsCollectorExtensions.IsWritingToPrometheus(DarkRift.Server.Metrics.MetricsCollector)">
            <summary>
            Returns whether the backing <see cref="T:DarkRift.Server.Metrics.MetricsWriter"/> of this collector is a Prometheus endpoint.
            </summary>
            <param name="metricsCollector">The metrics collector being extended.</param>
            <returns>true, if the writer is a Prometheus endpoint; else, false.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusMetricsCollectorExtensions.Histogram(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String,System.Double[])">
            <summary>
            Creates a new histogram metric.
            </summary>
            <param name="metricsCollector">The metrics collector being extended.</param>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <param name="buckets">The upper bounds of the buckets to aggregate into in ascending order, a bucket with value <see cref="F:System.Double.PositiveInfinity"/> will be automattically added if omitted.</param>
            <returns>The created histogram.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusMetricsCollectorExtensions.Histogram(DarkRift.Server.Metrics.MetricsCollector,System.String,System.String,System.Double[],System.String[])">
            <summary>
            Creates a new histogram metric with tags.
            </summary>
            <param name="metricsCollector">The metrics collector being extended.</param>
            <param name="name">The name of the metric.</param>
            <param name="description">The description of the metric.</param>
            <param name="buckets">The upper bounds of the buckets to aggregate into in ascending order, a bucket with value <see cref="F:System.Double.PositiveInfinity"/> will be automattically added if omitted.</param>
            <param name="tags">The tags to attach to the metric in the form "key:value".</param>
            <returns>The created histogram.</returns>
        </member>
        <member name="M:DarkRift.Server.Plugins.Metrics.Prometheus.PrometheusMetricsCollectorExtensions.ValidateTags(System.String[])">
            <summary>
            Clone of <see cref="M:DarkRift.Server.Metrics.MetricsCollector.ValidateTags(System.String[])"/>.
            </summary>
            <param name="tags">The tags to validate.</param>
        </member>
        <member name="T:DarkRift.Server.Plugins.Performance.ObjectCacheMonitor">
            <summary>
                Plugin that monitors the object cache and logs of any problems.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Performance.ObjectCacheMonitor.period">
            <summary>
                The number of miliseconds between checks.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Performance.ObjectCacheMonitor.timer">
            <summary>
                Timer to trigger performance checks.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Performance.ObjectCacheMonitor.lastFinalizedDarkRiftReaders">
            <summary>
                The number of <see cref="T:DarkRift.DarkRiftReader"/> objects that were last not recycled properly.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Performance.ObjectCacheMonitor.lastFinalizedDarkRiftWriters">
            <summary>
                The number of <see cref="T:DarkRift.DarkRiftWriter"/> objects that were last not recycled properly.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Performance.ObjectCacheMonitor.lastFinalizedMessages">
            <summary>
                The number of <see cref="T:DarkRift.Message"/> objects that were last not recycled properly.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Performance.ObjectCacheMonitor.lastFinalizedMessageBuffers">
            <summary>
                The number of <see cref="T:DarkRift.MessageBuffer"/> objects that were last not recycled properly.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Performance.ObjectCacheMonitor.lastFinalizedMessageReceivedEventArgs">
            <summary>
                The number of <see cref="T:DarkRift.Server.MessageReceivedEventArgs"/> objects that were last not recycled properly.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Performance.ObjectCacheMonitor.lastFinalizedAutoRecyclingArrays">
            <summary>
                The number of <see cref="T:DarkRift.AutoRecyclingArray"/> objects that were last not recycled properly.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Plugins.Performance.ObjectCacheMonitor.finalizationsCounter">
            <summary>
            Counter metric for the number of finalizations that have occured.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Plugins.Performance.ObjectCacheMonitor.CheckObjectCache(System.Object)">
            <summary>
                Performs a check on the object cache.
            </summary>
            <param name="state">The timer state.</param>
        </member>
        <member name="T:DarkRift.Server.PluginTestUtil">
            <summary>
                Utility for testing plugins.
            </summary>
        </member>
        <member name="M:DarkRift.Server.PluginTestUtil.RunCommandOn(System.String,DarkRift.Server.ExtendedPluginBase)">
            <summary>
                Runs a command on the given plugin.
            </summary>
            <param name="command">The command to invoke. Plugin names will be ignored</param>
            <param name="plugin">The plugin to invoke the command on.</param>
        </member>
        <member name="P:DarkRift.Server.RemoteServerManager.ServerID">
            <summary>
                The ID of the server in the cluster.
            </summary>
        </member>
        <member name="P:DarkRift.Server.RemoteServerManager.Group">
            <summary>
                The group the server is in.
            </summary>
        </member>
        <member name="P:DarkRift.Server.RemoteServerManager.Visibility">
            <summary>
                The visibility of the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.RemoteServerManager.AdvertisedHost">
            <summary>
                The host we're advertised on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.RemoteServerManager.AdvertisedPort">
            <summary>
                The port we're advertised on.
            </summary>
        </member>
        <member name="F:DarkRift.Server.RemoteServerManager.groups">
            <summary>
                The server groups in this server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.RemoteServerManager.networkListenerManager">
            <summary>
                The server's network listener manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.RemoteServerManager.serverRegistryConnectorManager">
            <summary>
                The server's registry connector manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.RemoteServerManager.pendingDownstreamServers">
            <summary>
                The downstream servers awaiting identification.
            </summary>
        </member>
        <member name="F:DarkRift.Server.RemoteServerManager.logger">
            <summary>
                The logger to use.
            </summary>
        </member>
        <member name="M:DarkRift.Server.RemoteServerManager.#ctor(DarkRift.Server.ServerSpawnData.ServerSettings,DarkRift.Server.ServerSpawnData.ServerRegistrySettings,DarkRift.Server.ClusterSpawnData,DarkRift.Server.NetworkListenerManager,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.ServerRegistryConnectorManager,DarkRift.Server.LogManager,DarkRift.Server.Logger,DarkRift.Server.Metrics.MetricsManager)">
            <summary>
                Creates a new server manager.
            </summary>
            <param name="serverSettings">The server's main configuration.</param>
            <param name="serverRegistrySettings">The server's registry configuration.</param>
            <param name="clusterSpawnData">The cluster configuration</param>
            <param name="networkListenerManager">The server's network listener manager.</param>
            <param name="threadHelper">The server's thread helper.</param>
            <param name="serverRegistryConnectorManager">The server's registry connector manager.</param>
            <param name="logManager">The server's log manager.</param>
            <param name="logger">The logger to use.</param>
            <param name="metricsManager">The server's metrics manager.</param>
        </member>
        <member name="M:DarkRift.Server.RemoteServerManager.SubscribeToListeners">
            <summary>
                Subscribes the server manager to all network listeners in the NetworkListenerManager.
            </summary>
        </member>
        <member name="M:DarkRift.Server.RemoteServerManager.RegisterServer">
            <summary>
                Registers the server in the registry.
            </summary>
        </member>
        <member name="M:DarkRift.Server.RemoteServerManager.DeregisterServer">
            <summary>
                Deregisters the server from the registry.
            </summary>
        </member>
        <member name="M:DarkRift.Server.RemoteServerManager.GetAllGroups">
            <inheritdoc/>
        </member>
        <member name="P:DarkRift.Server.RemoteServerManager.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.RemoteServerManager.GetGroup(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.RemoteServerManager.FindServer(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.RemoteServerManager.HandleServerJoin(System.UInt16,System.String,System.String,System.UInt16,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Handles a server becoming available.
            </summary>
            <param name="id">The ID of the server joining.</param>
            <param name="group">The group the server belongs to.</param>
            <param name="host">The host of the server.</param>
            <param name="port">The port of the server.</param>
            <param name="properties">The additional properties to connect with.</param>
        </member>
        <member name="M:DarkRift.Server.RemoteServerManager.HandleServerLeave(System.UInt16)">
            <summary>
                Handles a server leaving the cluster.
            </summary>
            <param name="id">The ID of the sever leaving.</param>
        </member>
        <member name="M:DarkRift.Server.RemoteServerManager.HandleNewConnection(DarkRift.Server.NetworkServerConnection)">
            <summary>
                Called when a new server connects to this server.
            </summary>
            <param name="connection">The new connection.</param>
        </member>
        <member name="M:DarkRift.Server.RemoteServerManager.HandleServerReady(DarkRift.Server.PendingDownstreamRemoteServer,System.UInt16)">
            <summary>
                Called when a pending server has identified itself.
            </summary>
            <param name="pendingServer">The pending server that has been identified.</param>
            <param name="id">The ID the server has identified with.</param>
        </member>
        <member name="M:DarkRift.Server.RemoteServerManager.HandleServerDroppedBeforeReady(DarkRift.Server.PendingDownstreamRemoteServer)">
            <summary>
                Called when a pending server gets dropped.
            </summary>
            <param name="pendingServer">The pending server that has been dropped.</param>
        </member>
        <member name="T:DarkRift.Server.ServerConnectedEventArgs">
            <summary>
                Event arguments for the <see cref="E:DarkRift.Server.IRemoteServer.ServerConnected"/> event.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerConnectedEventArgs.RemoteServer">
            <summary>
                The <see cref="T:DarkRift.Server.IRemoteServer"/> object for the server that connected.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerConnectedEventArgs.RemoteEndPoints">
            <summary>
                The collection of end points this server is connected to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerConnectedEventArgs.#ctor(DarkRift.Server.IRemoteServer)">
            <summary>
                Creates a new ServerConnectedEventArgs from the given data.
            </summary>
            <param name="remoteServer">The <see cref="T:DarkRift.Server.IRemoteServer"/> that connected.</param>
        </member>
        <member name="M:DarkRift.Server.ServerConnectedEventArgs.GetRemoteEndPoint(System.String)">
            <summary>
                Gets the remote end point with the given name.
            </summary>
            <param name="name">The end point name.</param>
            <returns>The end point.</returns>
        </member>
        <member name="T:DarkRift.Server.ServerConnectionDirection">
            <summary>
                The direction of a connection to another server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerConnectionDirection.Upstream">
            <summary>
                Indicates we connect to the remote server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerConnectionDirection.Downstream">
            <summary>
                Indicates the remote server connects to us.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerDisconnectedEventArgs">
            <summary>
                Event arguments for <see cref="E:DarkRift.Server.IRemoteServer.ServerDisconnected"/> events.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerDisconnectedEventArgs.RemoteServer">
            <summary>
                The remote server that disconnected.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerDisconnectedEventArgs.RemoteEndPoints">
            <summary>
                The collection of end points this server was connected to.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerDisconnectedEventArgs.Error">
            <summary>
                The error that caused the disconnect.
            </summary>
            <remarks>
                If the contents of this property is <see cref="F:System.Net.Sockets.SocketError.SocketError"/> consider 
                exploring <see cref="P:DarkRift.Server.ServerDisconnectedEventArgs.Exception"/> for a general exception that caused the disconnection 
                instead.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.ServerDisconnectedEventArgs.Exception">
            <summary>
                The exception that caused the disconnection.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerDisconnectedEventArgs.#ctor(DarkRift.Server.IRemoteServer,System.Net.Sockets.SocketError,System.Exception)">
            <summary>
                Creates a new ServerDisconnectedEventArgs from the given data.
            </summary>
            <param name="remoteServer">The RemoteServer that disconnected.</param>
            <param name="error">The error that caused the disconnect.</param>
            <param name="exception">The exception that caused the disconenct.</param>
        </member>
        <member name="M:DarkRift.Server.ServerDisconnectedEventArgs.GetRemoteEndPoint(System.String)">
            <summary>
                Gets the remote end point with the given name.
            </summary>
            <param name="name">The end point name.</param>
            <returns>The end point.</returns>
        </member>
        <member name="T:DarkRift.Server.ServerGroup`1">
            <summary>
                Base class for server groups.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerGroup`1.Item(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.ServerGroup`1.Count">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.ServerGroup`1.Name">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.ServerGroup`1.Visibility">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.ServerGroup`1.Direction">
            <inheritdoc />
        </member>
        <member name="E:DarkRift.Server.ServerGroup`1.ServerJoined">
            <summary>
                Event raised when a server joins the group.
            </summary>
        </member>
        <member name="E:DarkRift.Server.ServerGroup`1.ServerLeft">
            <summary>
                Event raised when a server leaves the group.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerGroup`1.threadHelper">
            <summary>
                The thread helper to use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerGroup`1.servers">
            <summary>
                The servers in this group.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerGroup`1.logger">
            <summary>
                The logger to use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerGroup`1.serversConnectedGauge">
            <summary>
                Gauge metric of the number of servers currently connected.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerGroup`1.serverJoinedEventTimeHistogram">
            <summary>
                Histogram metric of time taken to execute the <see cref="E:DarkRift.Server.ServerGroup`1.ServerJoined"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerGroup`1.serverLeftEventTimeHistogram">
            <summary>
                Histogram metric of time taken to execute the <see cref="E:DarkRift.Server.ServerGroup`1.ServerLeft"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerGroup`1.serverJoinedEventFailuresCounter">
            <summary>
                Counter metric of failures executing the <see cref="E:DarkRift.Server.ServerGroup`1.ServerJoined"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerGroup`1.serverLeftEventFailuresCounter">
            <summary>
                Counter metric of failures executing the <see cref="E:DarkRift.Server.ServerGroup`1.ServerLeft"/> event.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerGroup`1.GetAllRemoteServers">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.ServerGroup`1.GetRemoteServer(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.ServerGroup`1.HandleServerJoin(System.UInt16,System.String,System.UInt16,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.ServerGroup`1.HandleServerJoinEvent(System.UInt16,DarkRift.Server.IRemoteServer)">
            <summary>
                Handles the event for a new server joining the cluster.
            </summary>
            <param name="id">The id of the server joining.</param>
            <param name="remoteServer">The server joining.</param>
        </member>
        <member name="M:DarkRift.Server.ServerGroup`1.HandleServerLeave(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.ServerGroup`1.HandleServerLeaveEvent(System.UInt16,DarkRift.Server.IRemoteServer)">
            <summary>
                Handles the event for a server leaving the cluster.
            </summary>
            <param name="id">The server leaving.</param>
            <param name="remoteServer">The server leaving.</param>
        </member>
        <member name="M:DarkRift.Server.ServerGroup`1.AddServer(`0)">
            <summary>
                Adds a server to the group.
            </summary>
            <param name="remoteServer">The server to add.</param>
        </member>
        <member name="M:DarkRift.Server.ServerGroup`1.RemoveServer(System.UInt16)">
            <summary>
                Removes a server from the group.
            </summary>
            <param name="id">The id of the server to remove.</param>
        </member>
        <member name="T:DarkRift.Server.ServerJoinedEventArgs">
            <summary>
                Event arguments for the <see cref="E:DarkRift.Server.IServerGroup.ServerJoined"/> event.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerJoinedEventArgs.RemoteServer">
            <summary>
                The remote server that joined. Null if we do not connect to this group.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerJoinedEventArgs.ID">
            <summary>
                The ID of the remote server that joined.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerJoinedEventArgs.ServerGroup">
            <summary>
                The server group the new server joined.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerJoinedEventArgs.#ctor(DarkRift.Server.IRemoteServer,System.UInt16,DarkRift.Server.IServerGroup)">
            <summary>
                Creates new event args.
            </summary>
            <param name="remoteServer">The server that joined.</param>
            <param name="id">The ID of the server that joined.</param>
            <param name="serverGroup">The group the server joined.</param>
        </member>
        <member name="T:DarkRift.Server.ServerLeftEventArgs">
            <summary>
                Event arguments for the <see cref="E:DarkRift.Server.IServerGroup.ServerLeft"/> event.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerLeftEventArgs.RemoteServer">
            <summary>
                The remote server that left.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerLeftEventArgs.ID">
            <summary>
                The ID of the remote server that left.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerLeftEventArgs.ServerGroup">
            <summary>
                The server group the new server left.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerLeftEventArgs.#ctor(DarkRift.Server.IRemoteServer,System.UInt16,DarkRift.Server.IServerGroup)">
            <summary>
                Creates new event args.
            </summary>
            <param name="remoteServer">The server that left.</param>
            <param name="id">The ID of the server that left.</param>
            <param name="serverGroup">The group the server left.</param>
        </member>
        <member name="T:DarkRift.Server.ServerMessageReceivedEventArgs">
            <summary>
                Arguments for the <see cref="E:DarkRift.Server.IRemoteServer.MessageReceived"/> event.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerMessageReceivedEventArgs.SendMode">
            <summary>
                The method the data was sent using.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerMessageReceivedEventArgs.RemoteServer">
            <summary>
                The server the message was received from.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerMessageReceivedEventArgs.ServerGroup">
            <summary>
                The server group the message was received from.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerMessageReceivedEventArgs.Tag">
            <summary>
                The tag the message was sent with.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerMessageReceivedEventArgs.message">
            <summary>
                The message received.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerMessageReceivedEventArgs.isCurrentlyLoungingInAPool">
            <summary>
                Whether this args object is currently in an object pool waiting or not.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerMessageReceivedEventArgs.Create(DarkRift.Message,DarkRift.SendMode,DarkRift.Server.IRemoteServer)">
            <summary>
                Creates a new args object for the <see cref="E:DarkRift.Server.IRemoteServer.MessageReceived"/> event.
            </summary>
            <param name="message">The message received.</param>
            <param name="sendMode">The send mode the message was received with.</param>
            <param name="remoteServer">The server the message was received from.</param>
        </member>
        <member name="M:DarkRift.Server.ServerMessageReceivedEventArgs.#ctor">
            <summary>
                Creates a new args object for the <see cref="E:DarkRift.Server.IRemoteServer.MessageReceived"/> event.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerMessageReceivedEventArgs.GetMessage">
            <summary>
                Gets the message received.
            </summary>
            <returns>An new instance of the message received.</returns>
        </member>
        <member name="M:DarkRift.Server.ServerMessageReceivedEventArgs.Dispose">
            <summary>
                Recycles this object back into the pool.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerMessageReceivedEventArgs.Finalize">
            <summary>
                Finalizer so we can inform the cache system we were not recycled correctly.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerObjectCache.initialized">
            <summary>
                Whether this cache has been initialized yet.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerObjectCache.messageReceivedEventArgsPool">
            <summary>
                Object pool of <see cref="T:DarkRift.Server.MessageReceivedEventArgs"/> objects.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerObjectCache.serverMessageReceivedEventArgsPool">
            <summary>
                Object pool of <see cref="T:DarkRift.Server.ServerMessageReceivedEventArgs"/> objects.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerObjectCache.settings">
            <summary>
                The settings for all object caches.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerObjectCache.settingsLock">
            <summary>
                The lock for the settings field.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerObjectCache.Initialize(DarkRift.Server.ServerObjectCacheSettings)">
            <summary>
                Sets up the ObjectCache with the given settings.
            </summary>
            <returns>True if the object cache was set with the sepcified settings, false if it is already initialized.</returns>
        </member>
        <member name="M:DarkRift.Server.ServerObjectCache.ThreadInitialize">
            <summary>
                Initializes the object cache with the stored settings.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerObjectCache.GetMessageReceivedEventArgs">
            <summary>
                Returns a pooled <see cref="T:DarkRift.Server.MessageReceivedEventArgs"/> or generates a new one if there are none available.
            </summary>
            <returns>A free <see cref="T:DarkRift.Server.MessageReceivedEventArgs"/>.</returns>
        </member>
        <member name="M:DarkRift.Server.ServerObjectCache.ReturnMessageReceivedEventArgs(DarkRift.Server.MessageReceivedEventArgs)">
            <summary>
                Returns a used <see cref="T:DarkRift.Server.MessageReceivedEventArgs"/> to the pool.
            </summary>
            <param name="writer">The <see cref="T:DarkRift.Server.MessageReceivedEventArgs"/> to return.</param>
        </member>
        <member name="M:DarkRift.Server.ServerObjectCache.GetServerMessageReceivedEventArgs">
            <summary>
                Returns a pooled <see cref="T:DarkRift.Server.ServerMessageReceivedEventArgs"/> or generates a new one if there are none available.
            </summary>
            <returns>A free <see cref="T:DarkRift.Server.ServerMessageReceivedEventArgs"/>.</returns>
        </member>
        <member name="M:DarkRift.Server.ServerObjectCache.ReturnServerMessageReceivedEventArgs(DarkRift.Server.ServerMessageReceivedEventArgs)">
            <summary>
                Returns a used <see cref="T:DarkRift.Server.ServerMessageReceivedEventArgs"/> to the pool.
            </summary>
            <param name="writer">The <see cref="T:DarkRift.Server.ServerMessageReceivedEventArgs"/> to return.</param>
        </member>
        <member name="T:DarkRift.Server.ServerObjectCacheHelper">
            <summary>
                Helper class for the server's object cache.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerObjectCacheHelper.InitializeObjectCache(DarkRift.Server.ServerObjectCacheSettings)">
             <summary>
                 Initializes the object cache.
             </summary>
             <remarks>
                 Normally, initializing the object cache is handled for you when you create a server or client
                 however there are times when it is necessary to initialize it without creating a server or client
                 such as during testing. This method can be used to initialize the cache in those circumstances.
            
                 If the cache is already initialized this method will do nothing.
            
                 This method will also initialize the <see cref="T:DarkRift.ObjectCache"/>.
             </remarks>
             <param name="settings"></param>
        </member>
        <member name="P:DarkRift.Server.ServerObjectCacheHelper.FinalizedMessageReceivedEventArgs">
            <summary>
                The number of <see cref="T:DarkRift.Server.MessageReceivedEventArgs"/> objects that were not recycled properly.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerObjectCacheHelper.FinalizedServerMessageReceivedEventArgs">
            <summary>
                The number of <see cref="T:DarkRift.Server.ServerMessageReceivedEventArgs"/> objects that were not recycled properly.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerObjectCacheHelper.MessageReceivedEventArgsWasFinalized">
            <summary>
                Indcates an <see cref="T:DarkRift.Server.MessageReceivedEventArgs"/> did not get recycled properly.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerObjectCacheHelper.ServerMessageReceivedEventArgsWasFinalized">
            <summary>
                Indcates an <see cref="T:DarkRift.Server.ServerMessageReceivedEventArgs"/> did not get recycled properly.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerObjectCacheHelper.ResetCounters">
            <summary>
                Resets all counters to 0.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerObjectCacheSettings">
            <summary>
                Configuration for the <see cref="T:DarkRift.Server.ServerObjectCache"/>.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerObjectCacheSettings.DontUseCache">
            <summary>
                Return settings so no objects are cached.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerObjectCacheSettings.MaxMessageReceivedEventArgs">
            <summary>
                The maximum number of MessageReceivedEventArgs to cache per thread.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerObjectCacheSettings.MaxServerMessageReceivedEventArgs">
            <summary>
                The maximum number of ServerMessageReceivedEventArgs to cache per thread.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerRegistryConnector">
            <summary>
                A plugin that provides the server with information about the current architecture.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerRegistryConnector.ServerRegistryConnectorManager">
            <summary>
                The manager for all server registry connectors on this server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerRegistryConnector.RemoteServerManager">
            <summary>
                The server manager for remote servers.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerRegistryConnector.server">
            <summary>
                The server we belong to.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerRegistryConnector.#ctor(DarkRift.Server.ServerRegistryConnectorLoadData)">
            <summary>
                Creates a new server registry connector.
            </summary>
            <param name="serverRegistryConnectorLoadData">The data to load the connector with.</param>
        </member>
        <member name="M:DarkRift.Server.ServerRegistryConnector.RegisterServer(System.String,System.String,System.UInt16,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Registers the server with the cluster registry.
            </summary>
            <remarks>
                This will be called when the server starts up and indicates that the server should be added to the registry to be discovered by
                other servers.
            </remarks>
            <param name="group">The group this server belongs to.</param>
            <param name="host">The advertised host of this server.</param>
            <param name="port">The advertised port of this server.</param>
            <param name="properties">Any additional properties of this server.</param>
            <returns>The ID of the server in the registry.</returns>
        </member>
        <member name="M:DarkRift.Server.ServerRegistryConnector.DeregisterServer">
            <summary>
                Deregisters the server from the cluster registry.
            </summary>
            <remarks>
                This will be called when the server closes down and indicates that the server should be removed from the registry. This may not
                always be called depending on how the server closed and so health checks should be used or an implementation of
                <see cref="M:DarkRift.Server.ServerRegistryConnector.HandleConnectionFailure(System.UInt16)"/> supplied as a failsafe.
            </remarks>
        </member>
        <member name="M:DarkRift.Server.ServerRegistryConnector.HandleConnectionFailure(System.UInt16)">
             <summary>
                 Called when DarkRift is unable to connect to a server that the registry supplied.
             </summary>
             <remarks>
                 This can be used as an alternative to health checks to search for entries in the registry that have become unresponsive.
            
                 This method will be called whenever a server is unable to be connected to after the configured number of retries. It will be
                 called regardless of if this is the first time connecting following a call to
                 <see cref="M:DarkRift.Server.ServerRegistryConnector.HandleServerJoin(System.UInt16,System.String,System.String,System.UInt16,System.Collections.Generic.IDictionary{System.String,System.String})"/> or if it is a reconnection attempt
                 following a lost connection.
            
                 By default this method does nothing.
             </remarks>
             <param name="id">The ID of the server unable to connect to.</param>
        </member>
        <member name="M:DarkRift.Server.ServerRegistryConnector.HandleServerJoin(System.UInt16,System.String,System.String,System.UInt16,System.Collections.Generic.IDictionary{System.String,System.String})">
             <summary>
                 Instructs the server that a new server has joined the cluster.
             </summary>
             <remarks>
                 Upon calling this method DarkRift will decide whether is it necessary to track this server and whether or not a connection
                 needs to be made to it based on the contents of the system configuration file. Therefore it is ok to call this method for
                 all servers regardless of whether the server's group is relevant to this server or not.
            
                 Similarly this method can be called on a server when that server is the server joining (i.e. notifying it of itself) and
                 aditional checks do not need to be put in place in the connector as that call will be discarded automatically.
             </remarks>
             <param name="id">The ID of the server.</param>
             <param name="group">The group the server is part of.</param>
             <param name="host">The host of the server.</param>
             <param name="port">The port of the server.</param>
             <param name="properties">The additional properties to connect with.</param>
        </member>
        <member name="M:DarkRift.Server.ServerRegistryConnector.HandleServerLeave(System.UInt16)">
            <summary>
                Instructs the server that a server has left the cluster.
            </summary>
            <remarks>
                Upon calling this method DarkRift will check to see if it is actually connected to the server before performing any action.
                Therefore it is ok to call this method for all servers regardless of whether the server's group is relevant to this server or
                not.
            </remarks>
            <param name="id">The ID of the server.</param>
        </member>
        <member name="T:DarkRift.Server.ServerRegistryConnectorLoadData">
            <summary>
                Plugin load data for server registry connectors
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerRegistryConnectorLoadData.ServerRegistryConnectorManager">
            <summary>
                The server registry connector manager to pass to the plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerRegistryConnectorLoadData.RemoteServerManager">
            <summary>
                The server manager to pass to the plugin.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerRegistryConnectorLoadData.#ctor(System.String,System.Collections.Specialized.NameValueCollection,DarkRift.Server.DarkRiftInfo,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.Logger)">
            <summary>
                Creates new load data with the given properties.
            </summary>
            <param name="name">The name of the connector.</param>
            <param name="settings">The settings to pass the connector.</param>
            <param name="serverInfo">The runtime details about the server.</param>
            <param name="threadHelper">The server's thread helper.</param>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="T:DarkRift.Server.ServerRegistryConnectorManager">
            <summary>
                The manager of the server registry connector on the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerRegistryConnectorManager.server">
            <summary>
                The server we belong to.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerRegistryConnectorManager.pluginFactory">
            <summary>
                The server's plugin manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerRegistryConnectorManager.logManager">
            <summary>
                The server's log manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerRegistryConnectorManager.metricsManager">
            <summary>
            The server's metrics manager.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerRegistryConnectorManager.ServerRegistryConnector">
            <inheritdoc/>
        </member>
        <member name="M:DarkRift.Server.ServerRegistryConnectorManager.#ctor(DarkRift.Server.DarkRiftServer,DarkRift.Server.PluginFactory,DarkRift.Server.LogManager,DarkRift.Server.Metrics.MetricsManager)">
            <summary>
                Creates a new ServerRegistryConnectorManager.
            </summary>
            <param name="server">The server that owns this manager.</param>
            <param name="pluginFactory">The server's plugin factory.</param>
            <param name="logManager">The server's log manager.</param>
            <param name="metricsManager">The server's metrics manager.</param>
        </member>
        <member name="M:DarkRift.Server.ServerRegistryConnectorManager.LoadPlugins(DarkRift.Server.ServerSpawnData.ServerRegistrySettings)">
            <summary>
                Loads the plugins found by the plugin factory.
            </summary>
            <param name="settings">The settings to load plugins with.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData">
            <summary>
                Details of how to start a new server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.Server">
            <summary>
                The general settings for the server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginSearch">
            <summary>
                The locations to search for plugins in.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.Data">
            <summary>
                The settings for the data handler plugins and general persistent storage.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.Logging">
            <summary>
                The settings for the log writer plugins and general logging.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.Plugins">
            <summary>
                The settings for resolving and loading plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.Databases">
            <summary>
                The settings for database connections.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.Cache">
            <summary>
                The settings for the object cache.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.Listeners">
            <summary>
                The settings for the server's listeners.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerRegistry">
            <summary>
                The settings for the server regirsty.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.Metrics">
            <summary>
                The settings for the metrics writer plugins and general metrics.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.EventsFromDispatcher">
            <summary>
                Whether events are executed through the dispatcher or not.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DispatcherExecutorThreadID">
            <summary>
                The ID of the thread that will be executing dispatcher tasks for deadlock protection. Setting this to -1 will disable this.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.ServerSettings">
            <summary>
                Holds settings related to the overall server.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.Address">
            <summary>
                The address the server will listen on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.Port">
            <summary>
                The port number that the server should listen on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.IPVersion">
            <summary>
                The IP version to host the server on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.NoDelay">
            <summary>
                Whether to disable Nagle's algorithm.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.MaxStrikes">
            <summary>
                The number of strikes that can be received before the client is automatically kicked.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.UseFallbackNetworking">
            <summary>
                Whether the fallback networking system should be used for compatability with Unity.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.ServerGroup">
            <summary>
                The server group this server belongs to.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerSettings.ReconnectAttempts">
            <summary>
                The number of times to try to reconnect to a server before considering it unconnectable.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.ServerSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the server settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.PluginSearchSettings">
            <summary>
                Holds the paths to search for plugins from.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginSearchPaths">
            <summary>
                The paths to search.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginTypes">
            <summary>
                Individual types of plugins that should be loaded.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginSearchPath">
            <summary>
                A path to search.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginSearchPath.Source">
            <summary>
                The path.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginSearchPath.CreateDirectory">
            <summary>
                Whether the directory should be created if missing.
            </summary>
            <remarks>This has no effect when the path is a file.</remarks>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginSearchPath.DependencyResolutionStrategy">
            <summary>
            The way to resolve dependencies for the plugin.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.PluginSearchSettings.PluginSearchPath.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the path from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.PluginSearchSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the server settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.DataSettings">
            <summary>
                Holds settings for persistent data storage.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DataSettings.Directory">
            <summary>
                The directory to store data in.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.DataSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the server settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.LoggingSettings">
            <summary>
                Holds settings related to loading the logging system.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriters">
            <summary>
                The log writers to use.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.LoggingSettings.StartupLogLevels">
            <summary>
                Log levels to log out to console before log writers are loaded.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings">
            <summary>
                Holds settings about a log writer.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.Name">
            <summary>
                The name of the log writer.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.Type">
            <summary>
                The type of log writer.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.LogLevels">
            <summary>
                The types of logs to be directed to this writer.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.Settings">
            <summary>
                Settings that should be loaded for this writer.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.#ctor">
            <summary>
                Creates a new LoggingSettings object.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.LoggingSettings.LogWriterSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the log writer settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.LoggingSettings.#ctor">
            <summary>
                Creates a new LoggingSettings object.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.LoggingSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the logging settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.PluginsSettings">
            <summary>
                Handles the settings for plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginsSettings.LoadByDefault">
            <summary>
                The action to perform on all unlisted plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginsSettings.Plugins">
            <summary>
                The list of plugins to load.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.PluginsSettings.PluginSettings">
            <summary>
                Holds settings about a plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginsSettings.PluginSettings.Type">
            <summary>
                The type of plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginsSettings.PluginSettings.Load">
            <summary>
                Whether to load or ignore this plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.PluginsSettings.PluginSettings.Settings">
            <summary>
                Settings that should be loaded for this plugin.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.PluginsSettings.PluginSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the plugin settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.PluginsSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the plugins settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.DatabaseSettings">
            <summary>
                Holds settings related to loading databases for plugins.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DatabaseSettings.Databases">
            <summary>
                The databases to connect to.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.DatabaseSettings.DatabaseConnectionData">
            <summary>
                Holds data relating to a specific connection.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DatabaseSettings.DatabaseConnectionData.Name">
            <summary>
                The name of the connection.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.DatabaseSettings.DatabaseConnectionData.ConnectionString">
            <summary>
                The connection string to create the connection with.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.DatabaseSettings.DatabaseConnectionData.#ctor(System.String,System.String)">
            <summary>
                Creates a new Database Connection data object.
            </summary>
            <param name="name">The name of the connection.</param>
            <param name="connectionString">The connection string for the connection.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.DatabaseSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the database settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.CacheSettings">
            <summary>
                Holds settings related to the object cache.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.MaxCachedWriters">
            <summary>
                The maximum number of <see cref="T:DarkRift.DarkRiftWriter"/> instances stored per thread.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.MaxCachedReaders">
            <summary>
                The maximum number of <see cref="T:DarkRift.DarkRiftReader"/> instances stored per thread.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.MaxCachedMessages">
            <summary>
                The maximum number of <see cref="T:DarkRift.Message"/> instances stored per thread.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.MaxCachedSocketAsyncEventArgs">
            <summary>
                The maximum number of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs"/> instances stored per thread.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.MaxActionDispatcherTasks">
            <summary>
                The maximum number of <see cref="T:DarkRift.Dispatching.ActionDispatcherTask"/> instances stored per thread.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.MaxAutoRecyclingArrays">
            <summary>
                The maximum number of <see cref="T:DarkRift.AutoRecyclingArray"/> instances stored per thread.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.ObjectCacheSettings">
            <summary>
                The settings for the object cache.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.CacheSettings.ServerObjectCacheSettings">
            <summary>
                The settings for the object cache.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.CacheSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the cache settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.ListenersSettings">
            <summary>
                Holds settings related to loading the listeners system.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ListenersSettings.NetworkListeners">
            <summary>
                The listeners to use.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.ListenersSettings.NetworkListenerSettings">
            <summary>
                Holds settings about a network listener.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ListenersSettings.NetworkListenerSettings.Name">
            <summary>
                The name of the listener.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ListenersSettings.NetworkListenerSettings.Type">
            <summary>
                The type of listener.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ListenersSettings.NetworkListenerSettings.Address">
            <summary>
                The IP address this listener will listen on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ListenersSettings.NetworkListenerSettings.Port">
            <summary>
                The port this listener will listen on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ListenersSettings.NetworkListenerSettings.Settings">
            <summary>
                Settings that should be loaded for this listener.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.ListenersSettings.NetworkListenerSettings.#ctor">
            <summary>
                Creates a new NetworkListenerSettings object.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.ListenersSettings.NetworkListenerSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the listener settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.ListenersSettings.#ctor">
            <summary>
                Creates a new ListenerSettings object.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.ListenersSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the listener settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.MetricsSettings">
            <summary>
                Holds settings related to loading the metrics system.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.MetricsSettings.MetricsWriter">
            <summary>
                The metrics writer to use.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.MetricsSettings.EnablePerMessageMetrics">
            <summary>
                Whether to enable metrics that get emitted per message.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.MetricsSettings.MetricsWriterSettings">
            <summary>
                Holds settings about a metrics writer.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.MetricsSettings.MetricsWriterSettings.Type">
            <summary>
                The type of plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.MetricsSettings.MetricsWriterSettings.Settings">
            <summary>
                Settings that should be loaded for this metrics writer.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.MetricsSettings.MetricsWriterSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the metrics writer settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.MetricsSettings.#ctor">
            <summary>
                Creates a new MetricsSettings object.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.MetricsSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the metrics settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.ServerRegistrySettings">
            <summary>
                Holds settings related to loading the server registry.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerRegistrySettings.ServerRegistryConnector">
            <summary>
                The server registry connector to use.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerRegistrySettings.AdvertisedHost">
            <summary>
                The host the server is advertised on.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerRegistrySettings.AdvertisedPort">
            <summary>
                The port the server is advertised on.
            </summary>
        </member>
        <member name="T:DarkRift.Server.ServerSpawnData.ServerRegistrySettings.ServerRegistryConnectorSettings">
            <summary>
                Holds settings about a server registry connector.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerRegistrySettings.ServerRegistryConnectorSettings.Type">
            <summary>
                The type of plugin.
            </summary>
        </member>
        <member name="P:DarkRift.Server.ServerSpawnData.ServerRegistrySettings.ServerRegistryConnectorSettings.Settings">
            <summary>
                Settings that should be loaded for this server registry connector.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.ServerRegistrySettings.ServerRegistryConnectorSettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the server registry connector settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.ServerRegistrySettings.#ctor">
            <summary>
                Creates a new ServerRegistrySettings object.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.ServerRegistrySettings.LoadFromXmlElement(System.Xml.Linq.XElement,DarkRift.Server.ConfigurationFileHelper)">
            <summary>
                Loads the server registry settings from the specified XML element.
            </summary>
            <param name="element">The XML element to load from.</param>
            <param name="helper">The XML configuration helper being used.</param>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.CreateFromXml(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
                Creates a server spawn data from specified XML configuration file.
            </summary>
            <param name="filePath">The path of the XML file.</param>
            <param name="variables">The variables to inject into the configuration.</param>
            <returns>The ServerSpawnData created.</returns>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.CreateFromXml(System.Xml.Linq.XDocument,System.Collections.Specialized.NameValueCollection)">
            <summary>
                Creates a server spawn data from specified XML configuration file.
            </summary>
            <param name="document">The XML file.</param>
            <param name="variables">The variables to inject into the configuration.</param>
            <returns>The ServerSpawnData created.</returns>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:DarkRift.Server.ServerSpawnData.#ctor(System.Net.IPAddress,System.UInt16,DarkRift.IPVersion)">
            <summary>
                Creates a new server spawn data with necessary settings.
            </summary>
            <param name="address">The address the server should listen on.</param>
            <param name="port">The port the server should listen on.</param>
            <param name="ipVersion">The IP protocol the server should listen on.</param>
        </member>
        <member name="T:DarkRift.Server.ServerVisibility">
            <summary>
                The visibility of the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerVisibility.External">
            <summary>
                Indicates this server can only be connected to by clients.
            </summary>
        </member>
        <member name="F:DarkRift.Server.ServerVisibility.Internal">
            <summary>
                Indicates this server can only be connected to by other servers.
            </summary>
        </member>
        <member name="T:DarkRift.Server.StrikeEventArgs">
            <summary>
                Event arguments for the <see cref="E:DarkRift.Server.Client.StrikeOccured"/> event.
            </summary>
        </member>
        <member name="P:DarkRift.Server.StrikeEventArgs.Reason">
            <summary>
                The reason the strike was given.
            </summary>
        </member>
        <member name="P:DarkRift.Server.StrikeEventArgs.Message">
            <summary>
                The message supplied with the strike.
            </summary>
            <remarks>
                May be null in the case that no message is supplied.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.StrikeEventArgs.Forgiven">
            <summary>
                Has this strike been forgiven by a plugin?
            </summary>
        </member>
        <member name="P:DarkRift.Server.StrikeEventArgs.Weight">
            <summary>
                The number of strikes this accounts for.
            </summary>
        </member>
        <member name="F:DarkRift.Server.StrikeEventArgs.weight">
            <summary>
                The number of strikes this accounts for.
            </summary>
        </member>
        <member name="M:DarkRift.Server.StrikeEventArgs.#ctor(DarkRift.Server.StrikeReason,System.String,System.Int32)">
            <summary>
                Creates a new StrikeEventArgs object.
            </summary>
            <param name="reason">The reason for the strike.</param>
            <param name="message">The message supplied with the strike.</param>
            <param name="weight">The weight of the strike.</param>
        </member>
        <member name="M:DarkRift.Server.StrikeEventArgs.Forgive">
            <summary>
                Forgives the client of this strike so it will not count against them.
            </summary>
        </member>
        <member name="T:DarkRift.Server.StrikeReason">
            <summary>
                Reasons for strikes to be issued to clients.
            </summary>
        </member>
        <member name="F:DarkRift.Server.StrikeReason.InvalidMessageLength">
            <summary>
                Specifies the message wasn't long enough contain the message header.
            </summary>
        </member>
        <member name="F:DarkRift.Server.StrikeReason.InvalidCommand">
            <summary>
                Specifies the command the client sent was not accepted by the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.StrikeReason.PluginRequest">
            <summary>
                Specifies a plugin requested the strike.
            </summary>
        </member>
        <member name="F:DarkRift.Server.StrikeReason.ConnectionRequest">
            <summary>
                Specifies the client's connection requested the strike.
            </summary>
        </member>
        <member name="F:DarkRift.Server.StrikeReason.UnidentifiedPing">
            <summary>
                Specifies a client sent a ping acknowledgement for a nonexistant ping.
            </summary>
        </member>
        <member name="F:DarkRift.Server.StrikeReason.RttToLarge">
            <summary>
                Specifies a client sent a ping acknowledgment with too long a total RTT.
            </summary>
        </member>
        <member name="M:DarkRift.Server.StringUtility.Format(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint})">
            <summary>
                Formats a list of IPEndPoints nicely seperated by pipe characters.
            </summary>
            <param name="endPoints">The end points to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:DarkRift.Server.Timer">
            <summary>
                A timer for delaying execution or one-shot or repetative tasks.
            </summary>
            <remarks>
                <c>Pro only.</c> 
            </remarks>
        </member>
        <member name="P:DarkRift.Server.Timer.IsOneShot">
            <summary>
                Whether the timer is a one-shot timer.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Timer.Callback">
            <summary>
                The callback to invoke when the timer completes.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Timer.IntialDelay">
            <summary>
                The initial delay set on the timer.
            </summary>
        </member>
        <member name="P:DarkRift.Server.Timer.RepetitionPeriod">
            <summary>
                The repetition period set on the timer.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Timer.timer">
            <summary>
                The backing timer.
            </summary>
        </member>
        <member name="F:DarkRift.Server.Timer.threadHelper">
            <summary>
                The thread helper to use.
            </summary>
        </member>
        <member name="M:DarkRift.Server.Timer.#ctor(DarkRift.Server.DarkRiftThreadHelper,System.Int32,System.Action{DarkRift.Server.Timer})">
            <summary>
                Creates a new timer that will invoke the callback a single time.
            </summary>
            <param name="threadHelper">The thread helper to use.</param>
            <param name="delay">The delay in milliseconds before invoking the callback.</param>
            <param name="callback">The callback to invoke.</param>
        </member>
        <member name="M:DarkRift.Server.Timer.#ctor(DarkRift.Server.DarkRiftThreadHelper,System.Int32,System.Int32,System.Action{DarkRift.Server.Timer})">
            <summary>
                Creates a new timer that will invoke the callback repeatedly until stopped.
            </summary>
            <param name="threadHelper">The thread helper to use.</param>
            <param name="initialDelay">The delay in milliseconds before invoking the callback the first time.</param>
            <param name="repetitionPeriod">The delay in milliseconds between future invocations.</param>
            <param name="callback">The callback to invoke.</param>
        </member>
        <member name="M:DarkRift.Server.Timer.InvokeCallback(System.Object)">
            <summary>
                Invokes the callback.
            </summary>
            <param name="_">Unused.</param>
        </member>
        <member name="M:DarkRift.Server.Timer.Dispose">
            <summary>
                Disposes of the timer and cancels all future invocations.
            </summary>
        </member>
        <member name="T:DarkRift.Server.UpgradeEventArgs">
            <summary>
                Event arguments for plugin upgrades.
            </summary>
        </member>
        <member name="P:DarkRift.Server.UpgradeEventArgs.PreviousVersion">
            <summary>
                The previous version of the plugin installed.
            </summary>
        </member>
        <member name="M:DarkRift.Server.UpgradeEventArgs.#ctor(System.Version)">
            <summary>
                Creates a new UpgradeEventArgs object.
            </summary>
            <param name="previousVersion">The previous version of the plugin installed.</param>
        </member>
        <member name="E:DarkRift.Server.UpstreamRemoteServer.MessageReceived">
            <inheritdoc />
        </member>
        <member name="E:DarkRift.Server.UpstreamRemoteServer.ServerConnected">
            <inheritdoc />
        </member>
        <member name="E:DarkRift.Server.UpstreamRemoteServer.ServerDisconnected">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.UpstreamRemoteServer.ConnectionState">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.UpstreamRemoteServer.RemoteEndPoints">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.UpstreamRemoteServer.ServerGroup">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.UpstreamRemoteServer.ID">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.UpstreamRemoteServer.Host">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.UpstreamRemoteServer.Port">
            <inheritdoc />
        </member>
        <member name="P:DarkRift.Server.UpstreamRemoteServer.ServerConnectionDirection">
            <inheritdoc />
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.connection">
            <summary>
                The connection to the remote server.
            </summary>
            <remarks>
                Will change reference on reconnections. Currently this is not marked volatile as that is a very exceptional circumstance and at that point
                was can likely tolerate just waiting for something else to synchronise caches later.
            </remarks>
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.remoteServerManager">
            <summary>
                The remote server manager for the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.threadHelper">
            <summary>
                The thread helper to use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.serverGroup">
            <summary>
                The server group we are part of.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.logger">
            <summary>
                The logger to use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.messagesSentCounter">
            <summary>
                Counter metric of the number of messages sent.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.messagesReceivedCounter">
            <summary>
                Counter metric of the number of messages received.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.messageReceivedEventTimeHistogram">
            <summary>
                Histogram metric of the time taken to execute the <see cref="E:DarkRift.Server.UpstreamRemoteServer.MessageReceived"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.messageReceivedEventFailuresCounter">
            <summary>
                Counter metric of failures executing the <see cref="E:DarkRift.Server.UpstreamRemoteServer.MessageReceived"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.serverConnectedEventTimeHistogram">
            <summary>
                Histogram metric of time taken to execute the <see cref="E:DarkRift.Server.UpstreamRemoteServer.ServerConnected"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.serverDisconnectedEventTimeHistogram">
            <summary>
                Histogram metric of time taken to execute the <see cref="E:DarkRift.Server.UpstreamRemoteServer.ServerDisconnected"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.serverConnectedEventFailuresCounter">
            <summary>
                Counter metric of failures executing the <see cref="E:DarkRift.Server.UpstreamRemoteServer.ServerConnected"/> event.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamRemoteServer.serverDisconnectedEventFailuresCounter">
            <summary>
                Counter metric of failures executing the <see cref="E:DarkRift.Server.UpstreamRemoteServer.ServerDisconnected"/> event.
            </summary>
        </member>
        <member name="M:DarkRift.Server.UpstreamRemoteServer.#ctor(DarkRift.Server.RemoteServerManager,System.UInt16,System.String,System.UInt16,DarkRift.Server.UpstreamServerGroup,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.Logger,DarkRift.Server.Metrics.MetricsCollector)">
            <summary>
                Creates a new remote server.
            </summary>
            <param name="remoteServerManager">The remote server manager for the server.</param>
            <param name="id">The ID of the server.</param>
            <param name="host">The host connected to.</param>
            <param name="port">The port connected to.</param>
            <param name="group">The group the server belongs to.</param>
            <param name="threadHelper">The thread helper to use.</param>
            <param name="logger">The logger to use.</param>
            <param name="metricsCollector">The metrics collector to use.</param>
        </member>
        <member name="M:DarkRift.Server.UpstreamRemoteServer.SendMessage(DarkRift.Message,DarkRift.SendMode)">
            <summary>
                Sends a message to the server.
            </summary>
            <param name="message">The message to send.</param>
            <param name="sendMode">How the message should be sent.</param>
            <returns>Whether the send was successful.</returns>
        </member>
        <member name="M:DarkRift.Server.UpstreamRemoteServer.GetRemoteEndPoint(System.String)">
            <summary>
                Gets the endpoint with the given name.
            </summary>
            <param name="name">The name of the endpoint.</param>
            <returns>The end point.</returns>
        </member>
        <member name="M:DarkRift.Server.UpstreamRemoteServer.MessageReceivedHandler(DarkRift.MessageBuffer,DarkRift.SendMode)">
            <summary>
                Callback for when data is received.
            </summary>
            <param name="buffer">The data recevied.</param>
            <param name="sendMode">The SendMode used to send the data.</param>
        </member>
        <member name="M:DarkRift.Server.UpstreamRemoteServer.HandleCommand(DarkRift.Message)">
            <summary>
                Handles a command received.
            </summary>
            <param name="message">The message that was received.</param>
        </member>
        <member name="M:DarkRift.Server.UpstreamRemoteServer.HandleMessage(DarkRift.Message,DarkRift.SendMode)">
            <summary>
                Handles a message received.
            </summary>
            <param name="message">The message that was received.</param>
            <param name="sendMode">The send mode the emssage was received with.</param>
        </member>
        <member name="M:DarkRift.Server.UpstreamRemoteServer.DisconnectedHandler(System.Net.Sockets.SocketError,System.Exception)">
            <summary>
            Called when the connection is lost.
            </summary>
            <param name="error">The socket error that ocurred</param>
            <param name="exception">The exception that ocurred.</param>
        </member>
        <member name="M:DarkRift.Server.UpstreamRemoteServer.GetResultOfFirstSuccessfulInvocationOf``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Invokes the given function with each element of the inbound data until an exception is not thrown.
            </summary>
            <typeparam name="T">The type of inbound data.</typeparam>
            <typeparam name="TResult">The type of data being returned.</typeparam>
            <param name="inbound">The data to test the function against.</param>
            <param name="function">The function to test each peice fo data against.</param>
            <returns>The first result.</returns>
        </member>
        <member name="M:DarkRift.Server.UpstreamRemoteServer.Dispose">
            <summary>
                Disposes of the connection.
            </summary>
        </member>
        <member name="M:DarkRift.Server.UpstreamRemoteServer.Dispose(System.Boolean)">
            <summary>
                Handles disposing of the connection.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:DarkRift.Server.UpstreamServerGroup.Direction">
            <inheritdoc />
        </member>
        <member name="F:DarkRift.Server.UpstreamServerGroup.threadHelper">
            <summary>
                The server's thread helper.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamServerGroup.remoteServerManager">
            <summary>
                The remote server manager for the server.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamServerGroup.serverRegistryConnectorManager">
            <summary>
                The server's registry connector manager.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamServerGroup.reconnectAttempts">
            <summary>
                The number of times to try to retry before considering a server unconnectable.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamServerGroup.logger">
            <summary>
                The logger to use.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamServerGroup.remoteServerLogger">
            <summary>
            The logger to pass to created remote servers.
            </summary>
        </member>
        <member name="F:DarkRift.Server.UpstreamServerGroup.remoteServerMetricsCollector">
            <summary>
            The metrics collector to pass to created remote servers.
            </summary>
        </member>
        <member name="M:DarkRift.Server.UpstreamServerGroup.#ctor(System.String,DarkRift.Server.ServerVisibility,DarkRift.Server.DarkRiftThreadHelper,DarkRift.Server.ServerRegistryConnectorManager,DarkRift.Server.RemoteServerManager,System.Int32,DarkRift.Server.Logger,DarkRift.Server.Logger,DarkRift.Server.Metrics.MetricsCollector,DarkRift.Server.Metrics.MetricsCollector)">
            <summary>
                Creates a new upstream connected server group
            </summary>
            <param name="name">The name of the group.</param>
            <param name="visibility">The groups visibility.</param>
            <param name="threadHelper">The server's thread helper.</param>
            <param name="serverRegistryConnectorManager">The server's registry connector manager</param>
            <param name="remoteServerManager">The remote server manager for the server.</param>
            <param name="reconnectAttempts">The number of times to attempt to reconnect to a server before considering it unconnectable.</param>
            <param name="logger">The logger to use.</param>
            <param name="remoteServerLogger">The logger to pass to created remote servers.</param>
            <param name="metricsCollector">The metrics collector to use.</param>
            <param name="remoteServerMetricsCollector">The metrics collector to pass to created remote servers.</param>
        </member>
        <member name="M:DarkRift.Server.UpstreamServerGroup.HandleServerJoin(System.UInt16,System.String,System.UInt16,System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.UpstreamServerGroup.HandleServerLeave(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:DarkRift.Server.UpstreamServerGroup.GetConnection(System.Net.IPAddress,System.UInt16)">
            <summary>
                Retrieves a connection to the specified endpoint.
            </summary>
            <param name="address">The address to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>The created connection.</returns>
        </member>
        <member name="M:DarkRift.Server.UpstreamServerGroup.DisconnectedHandler(DarkRift.Client.NetworkClientConnection,DarkRift.Server.UpstreamRemoteServer,System.Exception)">
            <summary>
                Handles a server disconnecting.
            </summary>
            <param name="lostConnection">The connection that was lost.</param>
            <param name="remoteServer">The server that the connection was for.</param>
            <param name="exception">The exception that caused the disconnection.</param>
        </member>
        <member name="T:DarkRift.Server.WriteEventArgs">
            <summary>
                Arguments passed to loggers when reporting an event.
            </summary>
        </member>
        <member name="P:DarkRift.Server.WriteEventArgs.Sender">
            <summary>
                The component that sent the message.
            </summary>
        </member>
        <member name="P:DarkRift.Server.WriteEventArgs.Message">
            <summary>
                The message that was sent.
            </summary>
        </member>
        <member name="P:DarkRift.Server.WriteEventArgs.LogType">
            <summary>
                The type of log that was sent.
            </summary>
        </member>
        <member name="P:DarkRift.Server.WriteEventArgs.Exception">
            <summary>
                The exception (if present) that caused the event.
            </summary>
        </member>
        <member name="P:DarkRift.Server.WriteEventArgs.FormattedMessage">
            <summary>
                A formatted version of the event.
            </summary>
            <remarks>
                For efficiency you should log this whereever possible rather than re build your own formatted
                string for the message as this will be precomputed once for all log writers and it well optimized.
                It is also more consistent to those reading logs if tey are all the same format.
            </remarks>
        </member>
        <member name="P:DarkRift.Server.WriteEventArgs.LogTime">
            <summary>
                The time the log occured.
            </summary>
        </member>
        <member name="M:DarkRift.Server.WriteEventArgs.#ctor(System.String,System.String,DarkRift.LogType,System.Exception,System.String,System.DateTime)">
            <summary>
                Creates a new write event for log writers.
            </summary>
            <param name="sender">The object that logged the message.</param>
            <param name="message">The message logged.</param>
            <param name="logType">The log level of the message logged.</param>
            <param name="exception">The exception triggering the message, if one occured.</param>
            <param name="formattedMessage">A forrmatted string of the message details.</param>
            <param name="logTime">The time the message was logged.</param>
        </member>
        <member name="T:DarkRift.Server.WriteEventHandler">
            <summary>
                A handler for writing log events.
            </summary>
            <param name="message">The message being logged.</param>
            <param name="logType">The type of event being logged</param>
            <param name="exception">The exception (if present) being logged.</param>
        </member>
        <member name="T:DarkRift.Server.XmlConfigurationException">
            <summary>
                An exception raised for invalid XML configuration files.
            </summary>
        </member>
        <member name="P:DarkRift.Server.XmlConfigurationException.DocumentationLink">
            <summary>
            The location of documentation for this issue.
            </summary>
        </member>
        <member name="P:DarkRift.Server.XmlConfigurationException.LineInfo">
            <summary>
            The line information about where this issue is.
            </summary>
        </member>
        <member name="M:DarkRift.Server.XmlConfigurationException.#ctor(System.String,System.String,System.Xml.IXmlLineInfo)">
            <summary>
                Create and new exception for XML configurations with a message.
            </summary>
            <param name="msg">The message for the exception.</param>
            <param name="documentationLink">The location of documentation for this issue.</param>
            <param name="lineInfo">The line information about where this issue is.</param>
        </member>
        <member name="M:DarkRift.Server.XmlConfigurationException.#ctor(System.String,System.String,System.Xml.IXmlLineInfo,System.Exception)">
            <summary>
                Create and new exception for XML configurations with a message and inner exception.
            </summary>
            <param name="msg">The message for the exception.</param>
            <param name="documentationLink">The location of documentation for this issue.</param>
            <param name="lineInfo">The line information about where this issue is.</param>
            <param name="innerException">The inner exception.</param>
        </member>
    </members>
</doc>
